{"meta":{"title":"League2eb","subtitle":"璿慈一世、唯慈魚心","description":"iOS工程師的話唬爛專區","author":"League2eb","url":"https://ios.league2eb.me","root":"/"},"pages":[{"title":"categories","date":"2019-09-16T10:56:51.000Z","updated":"2020-06-04T10:22:39.000Z","comments":false,"path":"categories/index.html","permalink":"https://ios.league2eb.me/categories/index.html","excerpt":"","text":""},{"title":"Privacy Policy","date":"2019-09-19T04:49:49.000Z","updated":"2020-06-04T10:22:39.000Z","comments":true,"path":"Privacy-Policy/index.html","permalink":"https://ios.league2eb.me/Privacy-Policy/index.html","excerpt":"","text":"一、隱私權保護政策的適用範圍請說明該網站隱私權保護政策的適用範圍。 二、個人資料的蒐集、處理及利用方式請說明該網站針對個人資料的蒐集、處理及利用方式。 三、資料之保護請說明該網站針對取得資料的安全維護措施，如防止個人資料被竊取、竄改、毀損、滅失或洩漏，採取技術上及組織上之必要措施。 四、網站對外的相關連結請說明對外連結網站不適用本網站的隱私權保護政策，必須參考該連結網站中的隱私權保護政策。 五、與第三人共用個人資料之政策六、Cookie之使用請說明該網站使用Cookie技術來儲存或追蹤使用者的資料的情況。 七、隱私權保護政策之修正請說明該網站針對隱私權保護政策之修正措施。 隱私權條款範本文件非常歡迎您光臨「LazyBlog網站」（以下簡稱本網站），為了讓您能夠安心的使用本網站的各項服務與資訊，特此向您說明本網站的隱私權保護政策，以保障您的權益，請您詳閱下列內容： 一、隱私權保護政策的適用範圍隱私權保護政策內容，包括本網站如何處理在您使用網站服務時收集到的個人識別資料。隱私權保護政策不適用於本網站以外的相關連結網站，也不適用於非本網站所委託或參與管理的人員。 二、個人資料的蒐集、處理及利用方式 當您造訪本網站或使用本網站所提供之功能服務時，我們將視該服務功能性質，請您提供必要的個人資料，並在該特定目的範圍內處理及利用您的個人資料；非經您書面同意，本網站不會將個人資料用於其他用途。 本網站在您使用服務信箱、問卷調查等互動性功能時，會保留您所提供的姓名、電子郵件地址、聯絡方式及使用時間等。 於一般瀏覽時，伺服器會自行記錄相關行徑，包括您使用連線設備的IP位址、使用時間、使用的瀏覽器、瀏覽及點選資料記錄等，做為我們增進網站服務的參考依據，此記錄為內部應用，決不對外公佈。 為提供精確的服務，我們會將收集的問卷調查內容進行統計與分析，分析結果之統計數據或說明文字呈現，除供內部研究外，我們會視需要公佈統計數據及說明文字，但不涉及特定個人之資料。 三、資料之保護 本網站主機均設有防火牆、防毒系統等相關的各項資訊安全設備及必要的安全防護措施，加以保護網站及您的個人資料採用嚴格的保護措施，只由經過授權的人員才能接觸您的個人資料，相關處理人員皆簽有保密合約，如有違反保密義務者，將會受到相關的法律處分。 如因業務需要有必要委託其他單位提供服務時，本網站亦會嚴格要求其遵守保密義務，並且採取必要檢查程序以確定其將確實遵守。 四、網站對外的相關連結本網站的網頁提供其他網站的網路連結，您也可經由本網站所提供的連結，點選進入其他網站。但該連結網站不適用本網站的隱私權保護政策，您必須參考該連結網站中的隱私權保護政策。 五、與第三人共用個人資料之政策本網站絕不會提供、交換、出租或出售任何您的個人資料給其他個人、團體、私人企業或公務機關，但有法律依據或合約義務者，不在此限。 前項但書之情形包括不限於： 經由您書面同意。 法律明文規定。 為免除您生命、身體、自由或財產上之危險。 與公務機關或學術研究機構合作，基於公共利益為統計或學術研究而有必要，且資料經過提供者處理或蒐集者依其揭露方式無從識別特定之當事人。 當您在網站的行為，違反服務條款或可能損害或妨礙網站與其他使用者權益或導致任何人遭受損害時，經網站管理單位研析揭露您的個人資料是為了辨識、聯絡或採取法律行動所必要者。 有利於您的權益。 本網站委託廠商協助蒐集、處理或利用您的個人資料時，將對委外廠商或個人善盡監督管理之責。 六、Cookie之使用為了提供您最佳的服務，本網站會在您的電腦中放置並取用我們的Cookie，若您不願接受Cookie的寫入，您可在您使用的瀏覽器功能項中設定隱私權等級為高，即可拒絕Cookie的寫入，但可能會導致網站某些功能無法正常執行 。 七、隱私權保護政策之修正本網站隱私權保護政策將因應需求隨時進行修正，修正後的條款將刊登於網站上。"}],"posts":[{"title":"Disney+ 訂閱一年只要1350-1750台幣的正確姿勢","slug":"一年只要1740台幣的訂閱正確姿勢","date":"2021-11-17T18:53:47.000Z","updated":"2021-12-15T08:04:49.000Z","comments":true,"path":"posts/89bbd8b5/","link":"","permalink":"https://ios.league2eb.me/posts/89bbd8b5/","excerpt":"","text":"2021/12/15更新 因為有兩個人來訊跟我說翻車了，可能是我寫不好所以特別講一下「請按照順序操作」。 現在購買禮品卡不會塞車也不需要之前那樣還需要繁瑣的驗證真人。 由於匯率問題，現在更低價格了，昨天買只需要1350台幣。 講到翻車，本人嘗試救援並且使用下面方式，應用閃退(懶得再找原因，仁至義盡)。 砸殼ipa 使用AltStore登入土耳其的 apple id 作為重簽名 前言上週跟好朋友們去露營，本週又要跟夥伴進行久違的演出心情大好，所以決定寫篇完全不相干的文章表示感謝自己認真地活著。 肉身實踐完成時間為：2021年11月17下午6點整失效日期未知，請即刻上車。 價格對照 Disney+台灣訂閱價格為下列兩種 每月270台幣 每年2790台幣 Disney+土耳其訂閱價格為下列兩種 每月58.99土耳其里拉，折合台幣為155 每月579.99土耳其里拉，折合台幣為1519 肉身實踐總共花費台幣共1740元(含手續費用，實際要看匯率) 如果你剛好有朋友還可以找到另外三個人湊滿四人，一年訂閱費用只要435/人，平均每月36.25/人 自身準備條件 一隻iPhone，沒有的話可以不用往下操作，因為我覺得這世界上不該有Android存在。 信用卡，用來購買土耳其禮品卡 新的apple id，用來轉換APP商店國家取得最低價格 實踐概念與相關規則 Disney+僅接受使用apple id 底下之 apple pay方式進行訂閱支付。 利用Disney+根本沒有上架到土耳其蘋果商店，但是卻允許使用土耳其里拉作為支付貨幣的漏洞，進而達到目前最便宜訂閱Disney+的效果。 實際訂閱支付方式為 蘋果禮品卡，但僅接受土耳其禮品卡。 蘋果規定，若apple id 底下的禮品卡餘額沒有歸零，則無法進行 apple id 地區轉換作業，所以強烈建議新申請一個台灣的apple id 作為訂閱使用，因為要把小數點剛好花完非常困難。 建立一個新的 apple id (步驟一)首先先到官方網站建立一個新的蘋果帳號 下載Disney+，並註冊帳號 (步驟二) 如果沒有使用新帳號下載，那將會導致翻車，因為土耳其的蘋果商店根本沒有 Disney+ 也不可以使用原本的台灣帳號下載，因為Disney+主要驗證apple id 的購買記錄是否有下載過該應用 建立好新的apple id後，下載Disney+ 建立好新的apple id後，下載Disney+ 建立好新的apple id後，下載Disney+ 建立好新的apple id後，下載Disney+ 下載地址 看圖說故事 下載完畢之後打開Disney+ app，並點選立即註冊。 輸入帳號 建立密碼 此時，會跟你要錢，不要付款並且點擊取消或者關閉APP，這時候Disney+的帳號已經註冊成功，重新打開APP會提示你「完成訂閱」。 切換apple id 區域，更改訂閱付款貨幣為里拉(步驟三) 具體流程相當繁瑣，請看圖說故事 打開iPhone中的「設定」，並點擊 apple id 選擇媒體與購買項目 選擇檢視帳號 選擇國家與地區 點擊更改國家或地區 選擇土耳其 同意 輸入隨隨便便但必要欄位，輸入完畢後點擊下一頁 回到桌面打開APP，確認訂閱貨幣是否為TRY(里拉) 購買蘋果土耳其的禮品卡(步驟四) 禮品卡的序號會是X7LFNM9MRM5R7X64，沒看過的現在看看mtcgame網站購買一張價值50里拉的禮品卡需要台幣145元所以，至少需要購買12張價值50里拉的禮品卡才可以滿足土耳其年度訂閱的579.99里拉我算數不好，算錯就算錯愛過就愛過。 推薦網站 原本購買土耳其禮品卡沒什麼難度，但因為這兩天大流量進入該網站購買，導致mtcgame開始審核購買人資訊 https://www.mtcgame.com/ 沒使用過，純粹群友推薦，一次只能買10張 https://www.turgame.com/ 儲值禮品卡流程 具體流程相當不繁瑣，請看圖說故事，簡單啦 打開 App Store，並點擊右上角自己的照片 選擇Redeem Gift Card or Code 於框框內貼上你購買好的禮品卡序號，並點擊右上角Redeem 重複上述操作直到出現「Your Apple ID balance is now ₺600,00」 開啟Disney+ 並且完成付款(步驟五) 中途碰上什麼問題歡迎隨時寫信提問或者訊息我","categories":[{"name":"iOS","slug":"iOS","permalink":"https://ios.league2eb.me/categories/iOS/"}],"tags":[{"name":"iOS","slug":"iOS","permalink":"https://ios.league2eb.me/tags/iOS/"}]},{"title":"在Ubuntu系統底下建立Bitwarden","slug":"在Ubuntu系統底下建立Bitwarden","date":"2021-07-05T14:12:22.000Z","updated":"2021-07-06T01:55:41.000Z","comments":true,"path":"posts/3d41a36f/","link":"","permalink":"https://ios.league2eb.me/posts/3d41a36f/","excerpt":"","text":"前言與起源網路上相關文章非常多，但寫錯寫不清楚的占比大約90%這就是為什麼我寫這篇文章來教學Bitwarden。 還有，樂團成員總是問來問去某個服務的帳號密碼，但在通訊軟體交換密碼又是一件危險的事情成員本身也沒有使用密碼管理器的習慣，所以乾脆在原本的Server上建立一個管理器服務如此一來主管理員控制整個密碼資料存取，成員各自也可以建立自己的密碼資訊。 什麼是BitwardenBitwarden 一款密碼管理工具，顧名思義就是一個管理你所有密碼的平台 類似的平台有很多，例如：1password、lastpass 為什麼需要密碼管理器 想像你有三棟房子在台北、台中、高雄，三個家門的鑰匙會用同一把嗎?這個答案非常肯定是「不會」，因為危險。 所以你的臉書、IG、信箱都不算資產囉?既然三棟房子使用不同的鑰匙，為什麼三個不同平台的密碼要用同一組?一組密碼打天下的的優點就是「便利」，但是便利的背後隱藏的卻是嚴重的資安問題有的人會說：我只是個賣茶葉的，又不是工程師，幹嘛學這個?「資訊安全，人人有責」，因為自己不注意資安被竊取資料然後再去請朋友、警察協助「預防勝於治療」希望各位都理解。 如果使用的網路平台有一百個，不就要記一百組不同的密碼?所以你現在看到這篇文章，教你怎麼使用密碼管理器與搭建。 需求 一台伺服器，請移步 申請每月10T流量的免費伺服器 Ubuntu 18.04以上 網域名稱，推薦 Gandi SSL簽名，請移步 利用Let’s Encrypt自動簽署網域SSL憑證 更新一下 更新軟體資訊列表 1apt-get update 更新軟體 1apt-get upgrade 安裝Nginx1apt-get install nginx -y 安裝Docker 安裝 1apt install docker.io 啟動Dcoekr 1sudo systemctl start docker 設定伺服器重啟後，自動運行Docker 1sudo systemctl enable docker 安裝Docker-compose1sudo curl -L https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose 安裝Bitwarden 建立儲存資料夾 1mkdir -p /data/bitwarden &amp;&amp; cd /data/bitwarden 建立docker-compose設定文件 建議複製到筆記本修改好後，再貼到伺服器的終端機內執行 123456789101112131415161718192021222324252627cat &gt; docker-compose.yml &lt;&lt;EOFversion: '3'services: bitwarden: image: bitwardenrs/server:latest container_name: bitwarden restart: always volumes: - /data/docker/bitwarden/data:/data environment: WEB_VAULT_ENABLED: 'true' SIGNUPS_ALLOWED: 'true' WEBSOCKET_ENABLED: 'true' LOG_FILE: /data/bitwarden.log # 郵件SMTP這段不是必須，爽用再用 SMTP_HOST: 'mail.gandi.net' # 郵件伺服器 SMTP_FROM: 'service@league2eb.me' # 寄件者 SMTP_PORT: '465' SMTP_SSL: 'true' SMTP_USERNAME: 'service@league2eb.me' SMTP_PASSWORD: 'password' SMTP_EXPLICIT_TLS: 'true' ports: - 7006:80 - 7007:3012EOF 設定Nginx反向代理 移動到nginx設定檔案的位置，並新增設定檔案 1cd /etc/nginx/sites-available &amp;&amp; vi bitwarden.conf 建議先使用筆記本編輯好下面的內容後，在貼到bitwarden.conf中 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455upstream bitwardenrs-default &#123; server 127.0.0.1:7006; &#125;upstream bitwardenrs-ws &#123; server 127.0.0.1:7007; &#125;# Redirect HTTP to HTTPSserver &#123; listen 80; server_name pass.league2eb.me; # 改成你自己的網域 return 301 https://$host$request_uri;&#125;server &#123; listen 443 ssl http2; server_name pass.league2eb.me; #SSL # 這裡的SSL憑證請改成自己的路徑 ssl_certificate /etc/nginx/ssl/league2eb.me/fullchain.cer; # 這裡的SSL憑證請改成自己的路徑 ssl_certificate_key /etc/nginx/ssl/league2eb.me/keyfile.pem; ssl_protocols TLSv1.2 TLSv1.3; ssl_prefer_server_ciphers off; ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384; add_header Content-Security-Policy upgrade-insecure-requests; add_header X-XSS-Protection \"1; mode=block\"; add_header X-Content-Type-Options nosniff; add_header Referrer-Policy \"no-referrer-when-downgrade\"; #Location location / &#123; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_pass http://bitwardenrs-default; &#125; location /notifications/hub/negotiate &#123; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_pass http://bitwardenrs-default; &#125; location /notifications/hub &#123; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection $http_connection; proxy_set_header X-Real-IP $remote_addr; proxy_pass http://bitwardenrs-ws; &#125;&#125; 連結設定檔案符號表 連結檔案並刷新nginx服務 1cd /etc/nginx/sites-enabled &amp;&amp; ln -s ../sites-available/bitwarden.conf . &amp;&amp; systemctl reload nginx 正式啟用Bitwarden 移動到bitwarden資料夾 1cd /data/bitwarden 啟動 1docker-compose up -d 建立成功 使用、建立帳號 訪問自己的網域名稱將會看到這個畫面 選擇「建立帳戶」 填寫資料送出 禁止建立帳號 當家人、團隊組織成員或者自己建立好帳號後，必須關閉該註冊功能否則就是開大門。 回到伺服器內終端機操作移動到bitwarden資料夾 1cd /data/bitwarden 編輯docker-compose.yml 1vi docker-compose.yml 將SIGNUPS_ALLOWED改為false 如果不打算用網頁版本管理，WEB_VAULT_ENABLED改為false 重啟容器1docker-compose down &amp;&amp; docker-compose up -d 成功 手機端使用(iOS) 前往蘋果商店下載bitwarden手機版本 打開應用開點擊左上角齒輪 伺服器 URL輸入自己的網域名稱後儲存，其餘可忽略 手機、mac、windows都有提供，當然也少不了瀏覽器外掛 應用首頁後，使用方才網頁建立的帳號密碼登入 後記 整理一下「我覺得」密碼外洩、被盜用、重複登入警告的原因 將密碼儲存在Google瀏覽器或者Safari瀏覽器。 就是為了便利所以勾選「記住我」導致 同一組密碼使用所有平台。 使用通訊軟體直接交換密碼，如果你硬要，那我推薦 Telegram。 警告 如果要自己架設，需要有相對應管理Server的能力或者阻擋被攻擊的能力。 只要密碼儲存在「網路」就是不可能永遠安全。 這則教學文章建立在你沒有能力買NAS的前提下，如果有能力還是建議買NAS來架設Bitwarden。 好文推薦 !在群暉 Docker 搭建免費開源密碼管理器 Bitwarden","categories":[{"name":"Server","slug":"Server","permalink":"https://ios.league2eb.me/categories/Server/"}],"tags":[]},{"title":"建構Server常用指令與工具","slug":"建構Server常用指令與工具","date":"2021-01-26T17:52:29.000Z","updated":"2021-02-05T19:53:44.000Z","comments":true,"path":"posts/ae3603d5/","link":"","permalink":"https://ios.league2eb.me/posts/ae3603d5/","excerpt":"","text":"建構Server常用指令與工具先檢查一下1apt-get update 1apt-get upgrade 安裝 Nginx1apt-get install nginx -y 安裝 MariaDB1apt-get install mariadb-server -y 1systemctl enable mariadb.service 安装 PHP 7.41apt-get update 1apt install software-properties-common -y 1add-apt-repository ppa:ondrej/php 1apt-get install php7.4 php7.4-cli php7.4-fpm php7.4-mysql php7.4-json php7.4-opcache php7.4-mbstring php7.4-xml php7.4-gd php7.4-curl -y 1php -verson 建立WordPressDB1mysql -u root -p 1CREATE DATABASE wordpress_db; 1GRANT ALL ON wordpress_db.* TO &apos;wpuser&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;Password&apos; WITH GRANT OPTION; 1FLUSH PRIVILEGES; nginx相關建立WP目錄 1mkdir /var/www/html/wordpress 為 WordPress 創建 Nginx 服務器文件。 1/etc/nginx/sites-available/wordpress.conf 連接符號文件，順便重新載入設定 1cd /etc/nginx/sites-enabled &amp;&amp; ln -s ../sites-available/wordpress.conf . &amp;&amp; systemctl reload nginx 刷新，通常配置有變動後使用 1systemctl reload nginx 強制重啟nginx 1systemctl restart nginx 檢查狀態 1systemctl status nginx 檢查設定檔案語法有無錯誤 1nginx -t WordPress下載與安裝1cd /var/www/html/wordpress 1wget https://tw.wordpress.org/latest-zh_TW.tar.gz 1tar -zxvf latest-zh_TW.tar.gz 1mv wordpress/* . 1rm -rf wordpress latest-zh_TW.tar.gz 權限變更1cd /var/www/html &amp;&amp; chown -R www-data:www-data * 1chmod -R 755 * 設定WP文件1cd /var/www/html/wordpress &amp;&amp; mv wp-config-sample.php wp-config.php 1vi wp-config.php 123define(&apos;DB_NAME&apos;, &apos;wordpress_db&apos;); define(&apos;DB_USER&apos;, &apos;wpuser&apos;); define(&apos;DB_PASSWORD&apos;, &apos;Passw0rd!&apos;); 點擊產生安全鑰匙https://api.wordpress.org/secret-key/1.1/salt/ 修改上傳檔案大小的位置1vi /etc/php/7.4/fpm/php.ini 1upload_max_filesize = 32M 1post_max_size = 32M 1memory_limit = 64M 1max_execution_time = 300 重新啟動fpm 1systemctl restart php7.4-fpm.service nginx.conf的http括號內添加上限 1client_max_body_size 0; 1service nginx reload 80配置1234567891011121314151617181920212223242526272829303132333435363738server &#123; listen 80; root /var/www/html/wordpress; index index.php index.html; server_name XXXX; access_log /var/log/nginx/www.access.log; error_log /var/log/nginx/www.error.log; location / &#123; try_files $uri $uri/ =404; &#125; location ~ \\.php$ &#123; include snippets/fastcgi-php.conf; fastcgi_pass unix:/run/php/php7.4-fpm.sock; &#125; location ~ /\\.ht &#123; deny all; &#125; location = /favicon.ico &#123; log_not_found off; access_log off; &#125; location = /robots.txt &#123; allow all; log_not_found off; access_log off; &#125; location ~* \\.(js|css|png|jpg|jpeg|gif|ico)$ &#123; expires max; log_not_found off; &#125; &#125; 443配置123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960server &#123; listen 443 ssl; listen [::]:443 ssl; server_name demo1.xuanci.tw; root /var/www/html/wordpress/; index index.php index.html index.htm; access_log /var/log/nginx/access.log; error_log /var/log/nginx/error.log; ssl_certificate /etc/nginx/ssl/demo1.xuanci.tw/fullchain.cer; ssl_certificate_key /etc/nginx/ssl/demo1.xuanci.tw/keyfile.pem; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_prefer_server_ciphers on; ssl_ciphers AES256+EECDH:AES256+EDH:!aNULL; add_header Content-Security-Policy upgrade-insecure-requests; add_header X-XSS-Protection &quot;1; mode=block&quot;; add_header X-Content-Type-Options nosniff; add_header Referrer-Policy &quot;no-referrer-when-downgrade&quot;; location / &#123; try_files $uri $uri/ /index.php?$query_string; #try_files $uri $uri/ =404; &#125; location ~ \\.php$ &#123; include snippets/fastcgi-php.conf; fastcgi_pass unix:/run/php/php7.4-fpm.sock; &#125; location ~ /\\.ht &#123; deny all; &#125; location = /favicon.ico &#123; log_not_found off; access_log off; &#125; location = /robots.txt &#123; allow all; log_not_found off; access_log off; &#125; location ~* \\.(js|css|png|jpg|jpeg|gif|ico)$ &#123; expires max; log_not_found off; &#125; &#125;server &#123; listen 80; listen [::]:80; server_name demo1.xuanci.tw; rewrite ^/(.*) https://demo1.xuanci.tw/$1 permanent;&#125; 重新導向123456789101112131415server &#123; listen 443 ssl; listen [::]:443 ssl; server_name www.sunofmorning.com sunofmorning.com; rewrite ^/(.*) https://shop.sunofmorning.com/ permanent;&#125;server &#123; listen 80; listen [::]:80; server_name www.sunofmorning.com sunofmorning.com; rewrite ^/(.*) https://shop.sunofmorning.com/ permanent;&#125; nginx.conf1234567891011121314151617181920212223242526272829303132333435363738user www-data;worker_processes auto;error_log /var/log/nginx/error.log warn;pid /var/run/nginx.pid;events &#123; worker_connections 1024; accept_mutex on; use epoll; # The method used in linux 2.6+ accept_mutex_delay 100ms;&#125;http &#123; include /etc/nginx/mime.types; default_type application/octet-stream; log_format main &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos; &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos; &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;; access_log /var/log/nginx/access.log main; sendfile on; #tcp_nopush on; keepalive_timeout 65; gzip on; client_max_body_size 0; # Server Configuration include /etc/nginx/conf.d/*.conf; include /etc/nginx/sites-enabled/*;&#125;","categories":[{"name":"Server","slug":"Server","permalink":"https://ios.league2eb.me/categories/Server/"}],"tags":[]},{"title":"Docker啟動WP","slug":"Docker啟動WP","date":"2021-01-26T10:43:13.000Z","updated":"2021-01-26T10:51:09.000Z","comments":true,"path":"posts/405aca44/","link":"","permalink":"https://ios.league2eb.me/posts/405aca44/","excerpt":"","text":"Docker啟動WP安裝Docker1curl -fsSL https://get.docker.com -o get-docker.sh 1sh get-docker.sh 確認有安裝好Docker1docker -version 安裝Docker Comopose1apt install docker-compose 確認有安裝好docker compose1docker-compose 利用docker compose把yml檔案中的描述做啟動1docker-compose up -d yml1234567891011121314151617181920212223242526272829version: &apos;3.3&apos;services: wordpress: image: wordpress restart: always ports: - 80:80 environment: WORDPRESS_DB_HOST: db WORDPRESS_DB_USER: exampleuser WORDPRESS_DB_PASSWORD: examplepass WORDPRESS_DB_NAME: exampledb volumes: - ./wordpress:/var/www/html db: image: mysql:5.7 restart: always environment: MYSQL_DATABASE: exampledb MYSQL_USER: exampleuser MYSQL_PASSWORD: examplepass MYSQL_RANDOM_ROOT_PASSWORD: &apos;1&apos; volumes: - ./db:/var/lib/mysqldocker-compose.yml (END)","categories":[{"name":"Server","slug":"Server","permalink":"https://ios.league2eb.me/categories/Server/"}],"tags":[]},{"title":"Chrome找回下架或被誤判惡意的套件","slug":"Chrome找回下架或被誤判惡意的套件","date":"2020-11-12T07:33:20.000Z","updated":"2020-11-12T08:10:04.000Z","comments":true,"path":"posts/3fd5bfe1/","link":"","permalink":"https://ios.league2eb.me/posts/3fd5bfe1/","excerpt":"","text":"喜歡使用的Google Chrome 套件被下架或者被誤判為惡意軟體無法使用時，快速解決方式就是下載原始檔案並且放在本地端執行 找出該套件的資料夾打開擴充套件頁面1chrome://extensions/ 複製應用ID，這邊舉例One Click URL Shortener，因為今天發現他被判定為惡意程式 開啟終端機，並移動到下面的路徑1cd /Users/你的用戶名/Library/Application Support/Google/Chrome/Default/Extensions 搜尋該資料夾 所以，完整路徑就是 1/Users/你的用戶名/Library/Application Support/Google/Chrome/Default/Extensions/fjnodoodcohggdkacpmiidjikhlihcdk 確認搜尋到該資料夾後，回到Google Chrome「封裝擴充功能」 目錄請填寫剛剛找到的資料夾並且加入版本號 私密金鑰檔案留空 點擊封裝擴充功能 完成後會出現該對話視窗，並且於擴充路經中找到附檔名為crx的檔案 使用壞壞工具把程式碼給尻出來壞壞工具 選擇剛剛的crx檔案 下載原始碼到你自己想要放的資料夾 安裝快速安裝","categories":[{"name":"mac","slug":"mac","permalink":"https://ios.league2eb.me/categories/mac/"}],"tags":[{"name":"chrome","slug":"chrome","permalink":"https://ios.league2eb.me/tags/chrome/"}]},{"title":"Swift於字串中插入指定文字","slug":"Swift於字串中插入指定文字","date":"2020-06-05T01:24:42.000Z","updated":"2020-06-05T21:01:52.000Z","comments":true,"path":"posts/8e0ec638/","link":"","permalink":"https://ios.league2eb.me/posts/8e0ec638/","excerpt":"","text":"舉個例子信用卡輸入後，UI有可能會是這樣顯示 10000-0000-0000-0000 假設這個應用的UI不是設定四個TextField那這時，就有必要在指定的範圍內加入指定字串 extension12345678extension StringProtocol where Self: RangeReplaceableCollection &#123; mutating func insert(separator: Self, every count: Int) &#123; for i in indices.reversed() where i != startIndex &amp;&amp; distance(from: startIndex, to: i) % count == 0 &#123; insert(contentsOf: separator, at: i) &#125; &#125;&#125; 使用1234var creditcard: String = \"1111222233334444\"creditcard.insert(separator: \"-\", every: 4)print(creditcard)//1111-2222-3333-4444","categories":[{"name":"iOS","slug":"iOS","permalink":"https://ios.league2eb.me/categories/iOS/"}],"tags":[{"name":"Swift","slug":"Swift","permalink":"https://ios.league2eb.me/tags/Swift/"},{"name":"String","slug":"String","permalink":"https://ios.league2eb.me/tags/String/"}]},{"title":"iOS13中，statusBar訪問寫法","slug":"statusBar閃退解法","date":"2020-06-03T15:40:37.000Z","updated":"2020-06-05T21:01:52.000Z","comments":true,"path":"posts/216bbda6/","link":"","permalink":"https://ios.league2eb.me/posts/216bbda6/","excerpt":"","text":"原本是這樣寫，但訪問的時候會有機率性閃退123456var statusBarView: UIView? &#123; if responds(to: Selector((\"statusBar\"))) &#123; return value(forKey: \"statusBar\") as? UIView &#125; return nil&#125; 並且給出下面這段Error 新寫法1234567891011var statusBarView: UIView? &#123; if #available(iOS 13.0, *) &#123; let statusBarView = UIView(frame: UIApplication.shared.statusBarFrame) return statusBarView &#125; else &#123; guard let statusBarView = UIApplication.shared.value(forKeyPath: \"statusBarWindow.statusBar\") as? UIView else &#123; return nil &#125; return statusBarView &#125; &#125; 特別感謝MARK SU用心記錄此篇特別感謝，並筆記","categories":[{"name":"iOS","slug":"iOS","permalink":"https://ios.league2eb.me/categories/iOS/"}],"tags":[{"name":"Swift","slug":"Swift","permalink":"https://ios.league2eb.me/tags/Swift/"},{"name":"iOS","slug":"iOS","permalink":"https://ios.league2eb.me/tags/iOS/"},{"name":"UIView","slug":"UIView","permalink":"https://ios.league2eb.me/tags/UIView/"}]},{"title":"利用Let’s Encrypt自動簽署網域SSL憑證","slug":"利用Let’s Encrypt自動簽署網域SSL憑證","date":"2020-05-29T05:14:31.000Z","updated":"2021-01-28T17:21:19.000Z","comments":true,"path":"posts/27a8063c/","link":"","permalink":"https://ios.league2eb.me/posts/27a8063c/","excerpt":"","text":"Let’s Encrypt自動簽署斗大的標題「Let’s Encrypt 是免費、自動化和開放的憑證頒發機構」 基本上就是免費的SSL憑證簽署的服務 acme.sh一個自動從letsencrypt簽署免費證書的腳本 條件、環境 已經購買了網域名稱 已經從Cloudflare指定了IP 伺服器已經安裝nginx，如果沒有點這裡 安裝acme.sh以下兩個指令在Server端執行，不是本機 在伺服器安裝acme.sh 1curl https://get.acme.sh | sh 安裝完畢會這樣 移動到root底下的acme資料夾 1cd ./.acme.sh/ 安裝完畢打開acme.sh 的自動更新 1./acme.sh --upgrade --auto-upgrade 確認成功 從CloudFlare先記錄一下必要資訊選擇你已經建立好的網域 網頁滾動到在下方 打開一個記事本然後把這兩個複製貼上到記事本先記著，記事本不要關閉 區域ID 帳戶ID 申請令牌點擊剛剛記錄區域ID、帳戶ID區塊最下方的獲取您的API令牌 點擊創建令牌 令牌不可共用，所以獨立再創一個這個畫面只是表示我曾經創立過的樣子 找到編輯區域DNS併點擊使用模版 選擇你想指定的網域 滾動到最下方，繼續以顯示摘要 點擊創建令牌 複製專屬該網域的令牌到剛剛的記事本 確認一下記事本應該會像是這樣子，前面的文字是我標示的讓讀者清楚反正會有三組東西，但最好自己標記哪一個是什麼 回到伺服器做令牌、區域、帳戶設定這小標題寫很清楚，現在要去下指令的地方是伺服器噢！ 指定令牌、帳號、區域 1export CF_Token=剛剛複製的另牌 1export CF_Account_ID=剛剛複製的帳戶ID 1export CF_Zone_ID=剛剛複製的區域ID 簽名證書一樣是在伺服器下指令 先移動到/root/.acme.sh 1cd /root/.acme.sh 簽 1./acme.sh --issue --dns dns_cf -d 這文字替換成你的網域 -d &apos;*.這文字替換成你的網域&apos; 範例 1./acme.sh --issue --dns dns_cf -d fuckyou.com -d &apos;*.fuckyou.com&apos; 因為這裡會跑一大堆，直接看重點 會自動在/root/.acme.sh底下生成跟你的網域名稱一樣的資料夾 證書會放在這裡面 去nginx底下建立跟域名同樣的資料夾移動到nginx底下併建立ssl資料夾 1cd /etc/nginx/ &amp;&amp; mkdir ssl 移動到 ssl 資料夾並且建立與同域名相同的資料夾 1cd ssl &amp;&amp; mkdir 同域名資料夾名稱 建議這麼做是因為如果伺服器有多個域名，Key的檔案名稱會一樣，如果丟在同一個目錄底下會導致覆蓋，用域名來區分資料夾最好管理 安裝證書到指定資料夾回到acme資料夾 1cd /root/.acme.sh 替換指令中的文字，不要整個貼上去結果那邊苦惱… 1./acme.sh --installcert -d 網域名稱 --key-file /etc/nginx/ssl/同網域之資料夾名稱/keyfile.pem --fullchain-file /etc/nginx/ssl/同網域之資料夾名稱/fullchain.cer --reloadcmd &quot;sudo service nginx force-reload&quot; 成功 Nginx寫好設定檔案這裡的行為一樣是在Server端操作 移動到nginx資料夾內 1cd /etc/nginx/ 這裡說一個坑，必須讀 系統預設吃的443Port設定檔案會根據版本還有作業系統不同有差異寫到這裡的時候我本來要請讀者直接在conf.d裡面新增一個default.conf的檔案，但根據學習經驗…有可能預設讀取的位置卻是/etc/nginx/sites-enabled/資料夾底下套句我師父的話：「伺服器好難」 如果你的Nginx預設就有sites-enabled資料夾編輯nginx.conf，並指定設定檔案資料夾寫在http的括號內 123http &#123; include /etc/nginx/sites-enabled/*;&#125; 移動到sites-enabled 並且新增一個與你的網域同名的設定檔 1cd sites-enabled &amp;&amp; vi 網域.conf 把底下的程式碼直接貼上，但請修改好其中的網域 儲存寫入 1:wq 如果你的Nginx預設「沒有」sites-enabled資料夾移動並且編輯cond.d資料夾中的default.conf 修改好這個裡面的網域後貼上 儲存寫入 1:wq Cloudflare中SSL設定網域中類型A的代理切換為關閉 加密模式改為完全嚴格 重刷新網頁，查看憑證是否成功範例 如果以上有寫錯，或者不懂歡迎提出討論","categories":[],"tags":[]},{"title":"用指令殺死卡住的程式","slug":"用指令殺死卡住的程式","date":"2020-05-19T08:26:00.000Z","updated":"2020-06-04T10:22:39.000Z","comments":true,"path":"posts/9a823c6d/","link":"","permalink":"https://ios.league2eb.me/posts/9a823c6d/","excerpt":"","text":"程式卡住了而且無法停止有時候一次開太多東西會導致某個軟體卡住此時我們想要關閉重新開啟大多都使用command + option + esc但就算打了強制結束應用程式的視窗仍會發生 沒看到該應用程式 怎麼強制關閉就是關不了 終端機可以搞定打開終端機 替換xxx為卡死的軟體名稱 1echo \"$(ps -ceo pid=,comm= | awk '/xxx/ &#123; print $1; exit &#125;')\" 該指令成功的話會打印出一組數字例如 42454 1kill -9 42454 這篇很短看看就好","categories":[{"name":"Mac","slug":"Mac","permalink":"https://ios.league2eb.me/categories/Mac/"}],"tags":[{"name":"Shell","slug":"Shell","permalink":"https://ios.league2eb.me/tags/Shell/"},{"name":"Command","slug":"Command","permalink":"https://ios.league2eb.me/tags/Command/"}]},{"title":"Mac + OBS + GoPro + instagram直播","slug":"Mac + OBS + GoPro + instagram直播","date":"2020-05-17T10:50:10.000Z","updated":"2020-06-04T10:22:39.000Z","comments":true,"path":"posts/1ea94c7e/","link":"","permalink":"https://ios.league2eb.me/posts/1ea94c7e/","excerpt":"","text":"前言現在要直播似乎是一件容易的事情，尤其臉書、油管這兩個平台但若是要在「Mac」上進行instagram的直播似乎就是一件麻煩的事情 探索尋找答案的過程中發現了yuripe這位大神所撰寫的文章感謝yuripe！但在其中發現了一些小問題，是yuripe沒有特別撰寫到了，所以開了這篇來記錄一下 條件、必要軟體 GoPro macOS OBS Soundflower CameraSuite 環境配置安裝php 1brew install php 補充連線教學 PHP 問題解決","categories":[{"name":"mac","slug":"mac","permalink":"https://ios.league2eb.me/categories/mac/"}],"tags":[{"name":"mac","slug":"mac","permalink":"https://ios.league2eb.me/tags/mac/"},{"name":"ffmpeg","slug":"ffmpeg","permalink":"https://ios.league2eb.me/tags/ffmpeg/"},{"name":"php","slug":"php","permalink":"https://ios.league2eb.me/tags/php/"}]},{"title":"如何將推送通知發送到iOS模擬器","slug":"如何將推送通知發送到iOS模擬器","date":"2020-05-12T04:10:13.000Z","updated":"2020-06-04T10:22:39.000Z","comments":true,"path":"posts/258f1e09/","link":"","permalink":"https://ios.league2eb.me/posts/258f1e09/","excerpt":"","text":"過去Xcode一直以來都不支援模擬器接收推播當要測試的時候，僅能使用實機來做驗證相當麻煩！ 條件 Xcode 11.4 beta + 註冊通知並請求權限AppDelegate.swift 1234567891011121314151617import UIKitimport UserNotifications@UIApplicationMainclass AppDelegate: UIResponder, UIApplicationDelegate &#123; func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -&gt; Bool &#123; registerForPushNotifications() return true &#125; func registerNotification() &#123; UNUserNotificationCenter.current().requestAuthorization(options: [.alert, .sound, .badge]) &#123; (granted, error) in print(\"\\(granted)\") &#125; &#125;&#125; 寫一個模擬的通知內容並儲存附檔名為.apns的檔案Simulator Target Bundle必須要修改為對應的BundleId 12345678&#123; &quot;Simulator Target Bundle&quot;: &quot;對應的軟體BundleID&quot;, &quot;aps&quot;: &#123; &quot;alert&quot;: &quot;測試&quot;, &quot;sound&quot;: &quot;default&quot;, &quot;badge&quot;: 1 &#125;&#125; 寫好之後儲存在桌面命名ExamplePush.apns 複製模擬器的UDID 方法1 - 終端機輸入設備id替換為模擬器的UDID應用id替換為bundleid 1xcrun simctl push 設備id 應用id ExamplePush.apns 方法2 - 直接拖拉 幹，誰再跟我說Xcode難用你他媽人家有在進步啦！","categories":[{"name":"iOS","slug":"iOS","permalink":"https://ios.league2eb.me/categories/iOS/"}],"tags":[{"name":"Simulator","slug":"Simulator","permalink":"https://ios.league2eb.me/tags/Simulator/"}]},{"title":"利用v2ray連線vpn","slug":"利用v2ray連線vpn","date":"2020-05-03T11:20:34.000Z","updated":"2022-01-28T19:54:50.891Z","comments":true,"path":"posts/4deff9b2/","link":"","permalink":"https://ios.league2eb.me/posts/4deff9b2/","excerpt":"","text":"起因 我們公司不知道為什麼阻擋了我使用系統的vpn連線 電信商LTE都是走IPV6 ，而甲古文就是不允許…. 或者有其他原因….幹你xxxxxx 本篇注意事項 已經申請了伺服器 伺服器裡頭已經安裝Docker 沒跑過這個流程，但至少會開防火牆 [Server] - 表示指令都是在伺服器中操作 [Web] - 表示在某個網站上面操作 [Local] - 表示在你當前的電腦操作 [Client] - 表示在Mac桌面版本的v2ray操作 [Web] 去Server後台開一組防火牆 「目的地連接埠範圍」填寫 2020，你要寫1234也可以 [Server] - 在Server裡頭安裝v2ray獲取v2ray檔案 1docker pull v2ray/official 建立資料夾、建立設定檔案、設定權限 1mkdir -p /etc/v2ray 1touch /etc/v2ray/config.json 1chmod -R 777 /etc/v2ray/ [Web] 先製造一組專用識別號碼從這裡 先製造一組號碼貼到你的記事本，等等會用到 [Server] 編輯設定檔案進入編輯模式 1vi /etc/v2ray/config.json 把下面的內容貼上 12345678910111213141516171819202122232425262728293031323334353637383940&#123; &quot;log&quot;: &#123; &quot;access&quot;: &quot;/var/log/v2ray/access.log&quot;, &quot;error&quot;: &quot;/var/log/v2ray/error.log&quot;, &quot;loglevel&quot;: &quot;warning&quot; &#125;, &quot;inbound&quot;: &#123; &quot;port&quot;: 9487, &quot;protocol&quot;: &quot;vmess&quot;, &quot;settings&quot;: &#123; &quot;clients&quot;: [&#123; &quot;id&quot;: &quot;f476e5d9-62d6-4197-8c66-36f6e305fd80&quot;, &quot;level&quot;: 1, &quot;alterId&quot;: 64 &#125;] &#125;, &quot;streamSettings&quot;: &#123; &quot;network&quot;: &quot;tcp&quot; &#125; &#125;, &quot;outbound&quot;: &#123; &quot;protocol&quot;: &quot;freedom&quot;, &quot;settings&quot;: &#123;&#125; &#125;, &quot;outboundDetour&quot;: [&#123; &quot;tag&quot;: &quot;blocked&quot;, &quot;protocol&quot;: &quot;blackhole&quot;, &quot;settings&quot;: &#123;&#125; &#125;], &quot;routing&quot;: &#123; &quot;strategy&quot;: &quot;rules&quot;, &quot;settings&quot;: &#123; &quot;rules&quot;: [&#123; &quot;outboundTag&quot;: &quot;blocked&quot;, &quot;type&quot;: &quot;field&quot;, &quot;ip&quot;: [&quot;geoip:private&quot;] &#125;] &#125; &#125;&#125; UUID 把剛剛在網站上的那組號碼更換 把一開始去後台設定的防火牆連接埠號碼替換 [Server] 存檔如果不知道怎麼存檔，看這裡 [server] 開啟v2ray映像檔1docker run -d --name v2ray --cap-add=NET_ADMIN --restart=always -p 9487:9487/tcp -v /etc/v2ray:/etc/v2ray -v /var/log/v2ray:/var/log/v2ray v2ray/official 檢查一下 1docker ps [Client] 下載v2ray並設定好通道下載點 它長這樣子，我覺得很醜 打開之後，會運行在Mac的上方工作列，接進入設定 跟著圖片設定，完成後點擊右下角OK 伺服器IP位置 連接埠號 一開始建立的UDID 輸入1 給一個你自己看得懂的名字 點擊載入 查看IP位置，確定是否已經跳轉查看 特別感謝皮樂姊真的有夠正","categories":[{"name":"Server","slug":"Server","permalink":"https://ios.league2eb.me/categories/Server/"}],"tags":[{"name":"oracle","slug":"oracle","permalink":"https://ios.league2eb.me/tags/oracle/"}]},{"title":"一次移除本地垃圾分支","slug":"一次移除本地垃圾分支","date":"2020-04-29T03:17:26.000Z","updated":"2020-06-04T10:22:39.000Z","comments":true,"path":"posts/352ce7b8/","link":"","permalink":"https://ios.league2eb.me/posts/352ce7b8/","excerpt":"","text":"1git branch | grep -v \"develop\" | xargs git branch -D","categories":[],"tags":[]},{"title":"製作VPN的描述檔","slug":"製作VPN的描述檔","date":"2020-04-28T09:24:09.000Z","updated":"2020-06-04T10:22:39.000Z","comments":true,"path":"posts/5f22c5f9/","link":"","permalink":"https://ios.league2eb.me/posts/5f22c5f9/","excerpt":"","text":"前言需要VPN有很多種理由 做點壞事(?) 看其他國家的Netflix 就是想用免費流量的國外IP來訪問所有網路內容 本篇注意事項 標題有[Server] 表示指令在伺服器裡頭執行 標題有[Local] 表示該指令在當前的電腦裡頭的終端機執行 標題有[Web] 表示這個動作會在Oracle的Dashboard操作 [Local] SSH連線到你已經戳到的Oracle Serve1ssh -i id_rsa ubuntu@你的Oracle伺服器IP [Local] 同意連線，輸入yes並點按下enter1234Warning: Identity file id_rsa not accessible: No such file or directory.The authenticity of host '127.0.0.1 (127.0.0.1)' can't be established.ECDSA key fingerprint is SHA256:UhUdslpLpVGkuwdT6VodmB3L4LkjStjXrxydr9b9NMs.Are you sure you want to continue connecting (yes/no/[fingerprint])? 這是成功連線畫面 [Server] 進入Root權限模式1sudo su [Server] 修改密碼1passwd 輸入的時候不會顯示密碼 [Server] 修改authorized_keys內容編輯authorized_keys 1cd ~ &amp;&amp; vi ~/.ssh/authorized_keys 瘋狂按鍵盤上的d直到內容空白 點擊鍵盤上的「i」進入編輯模式，左下角應該會出現insert 再開一個終端機，一個畫面是Server一個畫面是Local[Local] 回到電腦的終端機尋找id_rsa.pub裡頭的鑰匙並複製起來1less ~/.ssh/id_rsa.pub [Server] 把剛剛複製的Key貼到進入編輯模式的authorized_keys底下 完成後先按一下鍵盤的ESC，然後下指令 1:wq 然後Enter這裡的作法是為了讓你本機電腦可以直接進入root的權限模式 [Web] 開防火牆 80Port = 只是為了測試使用，不爽開可以略過 443Port = 未來如果有使用SSL，這裡就一起開吧 運算 -&gt; 執行處理 點擊你的機器 點擊公用子網路 點擊安全清單下的安全資訊 點擊新增傳入規則按鈕，並新增三組，仔細看下面圖片 新增80Port 新增4500Port 新增500Port [Server] 移除 iptables、安裝ufw1apt remove iptables 1apt-get install ufw [Server] 使用ufw允許22、500、4500、80、443port，並且打開防火牆1ufw allow 22 1ufw allow 500 1ufw allow 4500 1ufw allow 80 1ufw allow 443 1ufw enable [Server] 順手安裝nginx，然後重新啟動機器(重要)若沒有先安裝nginx，機器內則沒有listen 80 的程式，在local端測試時會變成closed 1apt-get install nginx 1reboot [Local] 嘗試戳一下你的Server的80portSTATE應該要是open，若按照上述流程但仍然是closed表示沒有program listen 80 port 1nmap -v -Pn -p 80 你的伺服器IP [Server] 檢查ufw是不是沒被關掉，沒被關掉就是成功了1ufw status numbered [Server] 安裝Docker更新一下 1apt-get update 安裝 1apt install docker.io 啟動 1sudo systemctl start docker 1sudo systemctl enable docker [Server] 建立vpn設定檔案先複習一下vi\u0010 鍵入 i 進入編輯模式 esc退出編輯模式 :wq儲存該次編輯 (w前面有一個:) :q!取消該次編輯 1vi ~/strongswan.conf 把下面的內容貼到 strongswan.conf 12345678910charon &#123; load_modular = yes plugins &#123; include strongswan.d/charon/*.conf attr &#123; dns = 1.1.1.2, 8.8.8.8 &#125; &#125;&#125;include strongswan.d/*.conf [Server] 利用Docker跑一個 vpn Service 查詢本機IP，方便複製 1curl ifconfig.me 查詢本機hostname，一樣複製用 1hostname 替換下面的HOST、HOSTNAME欄位並且跑起來 12345docker run --cap-add=NET_ADMIN -d --name vpn-server --restart=always \\-p 500:500/udp -p 4500:4500/udp \\-v ~/strongswan.conf:/etc/strongswan.conf \\-e \"HOST=127.0.0.1\" -e \"HOSTNAME=name\" \\billimek/ikev2-vpn-server [Server] 最後一步，製作MacOS、iPhone可直接使用的描述檔案1docker exec -it vpn-server generate-mobileconfig &gt; ikev2-vpn.mobileconfig 使用很簡單，看了就會","categories":[{"name":"Server","slug":"Server","permalink":"https://ios.league2eb.me/categories/Server/"}],"tags":[{"name":"oracle","slug":"oracle","permalink":"https://ios.league2eb.me/tags/oracle/"}]},{"title":"申請每月10T流量的免費伺服器","slug":"申請每月10T流量的免費伺服器","date":"2020-04-28T05:05:42.000Z","updated":"2020-06-04T10:22:39.000Z","comments":true,"path":"posts/af9bcccd/","link":"","permalink":"https://ios.league2eb.me/posts/af9bcccd/","excerpt":"","text":"前言學習開發初期使用了老師推薦的AWS EC2對於當時我的來說一年免費是一件見非常棒的事情只不過對於一年就得申請一個新帳號搬一次家來說，很不方便如果真的很窮，又蕭貪你可以好好看這整篇教學，我盡量的不要有遺漏任何的細節所以高手們若看到此篇也請不要雞雞歪歪在那邊說 「阿這麼簡單也要講」 不論對象的無私奉獻將會讓你感到富有 甲骨文帳號申請甲骨文已經開放該免費伺服器有段時間若您已經有帳號，可以直接前往下一段 Oracle Cloud 官方網站若失效請 點這裡 點擊開始免費試用 選擇區域- 這裡不用特別注意是選擇哪個區域，我的話選擇台灣，選擇完畢後點擊Next 帳號預設為個人，我沒有特別選擇 帳號名稱就取個自己的好記的就行 1注意，HomeRegion要選擇後面有免費區域的，例如韓國 1這邊的選擇非常重要，手別抖 填寫帳號資訊- 唯一要注意的地方是手機號碼，一定要可以接簡訊驗證 - 但是，甲骨文業務也可能會時不時打給你推銷？(聽某前輩說的) 輸入驗證號碼 加入信用卡，作為驗證使用- 會扣個零錢來當做驗證使用 - 除非你升級帳戶等級，不然不用擔心收費問題 點擊完成註冊 以上就是整個註冊帳號的過程，還算簡單啟動一台虛擬機器點擊左上角漢堡按鈕來新增一台機器- 運算 -&gt; 執行處理 點擊執行處理按鈕 變更映像檔，並選擇Ubuntu 20.04這個步驟不一定要使用這裡推薦的Ubuntu只要是免費都可以如果錢很多，送我 貼上Mac電腦的鑰匙鑰匙製作 往下捲動頁面並點擊建立1會發現根本無法建立，因為免費限量的 在這個建立機器的頁面點擊右鍵並選擇「檢查」 選擇Network標籤並再次點擊「建立」 搜尋框輸入instances並點擊左側項目，點擊後在將右側欄位選到「Headers」 找到「Request Payload」 用記事本、SublimeText把我列出來的欄位暫時記錄，等等會用123456availabilityDomain = dAKB:AP-SEOUL-1-AD-1compartmentId = ocid1.tenancy.oc1.. y28gNGS9qry8cybaF9dGXGWcaThRurPmsubnetId = ocid1.subnet.oc1.ap-seoul-1. V49dCAUY6gkSB9SXAx4tTTBkZ8G8hv3Yshape = VM.Standard.E2.1.Microssh_authorized_keys = ...imageId = ocid1.image.oc1.ap-seoul-1. Hv8NtHAXvSyXhqWheSmAV3EpMCUGvWD4 取得 User OCID，一樣記錄下來等等會用到 1User OCID = ocid1.user.oc1.. r33UG24QdSRaQ8B3guWxVCNYKrsCcUQf 獲取Tenancy OCID ，一樣記錄下來等等會用到 1Tenancy_OCID = ocid1.tenancy.oc1.. fYZrqb7gqyYeMKNBfmrVSfdXsXERNrYB 打開終端機，並安裝oci命令管理工具 直接貼在終端機後按下Enter，中間會詢問你很多問題，都直接Enter就可 這邊可能要有sudo權限 會有幾個問題問你Y/n ，輸入Y後按下Enter 1sudo bash -c \"$(curl –L https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh)\" 在終端機裡頭確認是否安裝成功12~/bin/oci -v2.10.0 在終端機裡頭設定帳號訊息、請求鑰匙1~/bin/oci setup config 第一個問題直接按下Enter Enter a location for your config [/Users/xxx/.oci/config]: 第二個問題請把剛剛記錄下來的User OCID給複製貼上後按下Enter Enter a user OCID: 第三個問題請把剛剛記錄下來的Tenancy OCID給複製貼上後按下Enter Enter a user OCID: 第四個問題請到這裡查詢後輸入舉例韓國：ap-seoul-1 Enter a region 後續的問題請直接點擊Enter或者輸入Y即可 其中會有一個問題是請您設定伺服器證書的密碼，可以不要設定 設定完成畫面 把鑰匙上傳到個人設定頁面中鑰匙路徑，再說一次，這裡的xxx是你的使用者名稱1 1~/.oci/oci_api_key_public.pem 終端機內查看金鑰是否可以成功Work1~/bin/oci iam availability-domain list 在終端機先測試一次看看是否戳到1~/bin/oci compute instance launch --availability-domain &lt;your_ availabilityDomain&gt; --image-id &lt;your_imageid&gt; --subnet-id &lt;your_subnetid&gt; --shape VM.Standard.E2.1.Micro --assign-public-ip true --metadata &apos;&#123;&quot;ssh_authorized_keys&quot;: &quot;ssh-rsa your_ssh_key&quot;&#125;&apos; --compartment-id &lt;your_compartmentid&gt; 下面是Response，若看到這段就表示戳api這個行為是成功的 1234567ServiceError:&#123; &quot;code&quot;: &quot;InternalError&quot;, &quot;message&quot;: &quot;Out of host capacity.&quot;, &quot;opc-request-id&quot;: &quot;xxxx----&quot;, &quot;status&quot;: 500&#125; 在終端機內間隔30秒戳一次api來搶伺服器空間這裡面包含了很多剛剛暫時記下來的Request Payload請務必仔細更換建議先把下面的指令貼到記事本，一個一個修改注意&lt;&gt;不要帶入，這裡只是提示要在這裡替換除非你一直盯著終端機看，不然大部分看到的時間都是回應500你得定期回去甲骨文的Dashboard查看 1while true; do ~/bin/oci compute instance launch --availability-domain &lt;your_ availabilityDomain&gt; --image-id &lt;your_imageid&gt; --subnet-id &lt;your_subnetid&gt; --shape VM.Standard.E2.1.Micro --assign-public-ip true --metadata &apos;&#123;&quot;ssh_authorized_keys&quot;: &quot;ssh-rsa your_ssh_key&quot;&#125;&apos; --compartment-id &lt;your_compartmentid&gt; ;date; sleep 30; done 結論基本上GUI操作來開啟虛擬機的方式，幾乎可以說開不了因為早就被搶光了，所以這裡使用的方法就是利用API的方式「建立虛擬機」！ 扣錢基本上註冊的時候甲骨文有送400SGD請定期回來看一下是否有減少，若有表示設定錯誤！ 下一步，設定vpn這個步驟難度稍高，請詳細閱讀","categories":[{"name":"Server","slug":"Server","permalink":"https://ios.league2eb.me/categories/Server/"}],"tags":[{"name":"oracle","slug":"oracle","permalink":"https://ios.league2eb.me/tags/oracle/"}]},{"title":"mac上VPN描述檔案安裝方法","slug":"mac上VPN描述檔案安裝方法","date":"2020-04-27T11:07:54.000Z","updated":"2020-06-04T10:22:39.000Z","comments":true,"path":"posts/e02a3e3e/","link":"","permalink":"https://ios.league2eb.me/posts/e02a3e3e/","excerpt":"","text":"有時候會需要把當前的網路跳離台灣來做點事情1做點壞事 1看台灣沒有的影片 1沒有，我就是不想要我的當前網路環境在台灣 以上都可以是理由 開一台10T/月 流量的伺服器，並且不花半毛錢帳號申請，難度不算高 製作VPN的描述檔此篇有一定技術門檻與理解能力，請謹慎閱讀 跳過前兩步驟跟我拿取描述檔，親朋好友適用有幾個管道 臉書 Line 面交 安裝 點擊兩下打開描述檔 詢問是否安裝，點擊繼續 會有個警告，跟你說這描述檔案沒有說誰製作的，是不是真的要安裝，點擊繼續 使用者名稱、密碼全部不用輸入直接點擊右下角安裝 點擊安裝後會詢問電腦密碼，輸入安裝完畢後會自動連上VPN 打開設定，並點擊「網路」 選擇VPN並且把「按要求連線給取消選擇」 點擊右下角套用後，再點擊連線 這邊建議勾選「在選單列中顯示VPN狀態」，這樣可以快速關閉、打開","categories":[{"name":"Server","slug":"Server","permalink":"https://ios.league2eb.me/categories/Server/"}],"tags":[{"name":"VPN","slug":"VPN","permalink":"https://ios.league2eb.me/tags/VPN/"}]},{"title":"TweakDylib與ipa合併流程","slug":"TweakDylib與ipa合併流程","date":"2020-04-07T18:38:16.000Z","updated":"2020-06-04T10:22:39.000Z","comments":true,"path":"posts/337c9b10/","link":"","permalink":"https://ios.league2eb.me/posts/337c9b10/","excerpt":"","text":"本篇僅供學術使用 閱讀對象：不想要手機越獄，但又想要安裝帶有Tweak功能的應用 具備條件 一台Mac(PC我不熟🌚) 一台iOS設備，並且已經越獄 已經安裝Xcode，因為會使用到otool、install_name_tool指令 看過這篇文章，知道怎麼ssh連線到你的越獄設備 下載libsubstrate.dylib先放在桌面 下載optool，放到/usr/local/bin 針對optool在終端機下指令，權限不夠無法執行 1chmod +x optool 找一個別人寫好的deb，這邊用Facebook的Messenger作為例子沒有使用之前，有一則廣告 Tweak生效後，廣告消失了 Cydia安裝 攔截deb點擊「重新啟動SpringBoard」後，deb就會被刪除 所以請停止在這個畫面，然後操作攔截流程 首先使用終端連線到越獄的設備 檢查該deb安裝檔案是否存在 1cd /private/var/mobile/Library/Caches/com.saurik.Cydia/archives/ 由此，可以確認我們要的檔案存在於 1/private/var/mobile/Library/Caches/com.saurik.Cydia/archives/com.haoict.messengernoads_0.0.2_iphoneos-arm.deb 利用SCP把檔案傳送到Mac裡建議先把終端機的路徑移動到桌面 1scp -P2222 root@127.0.0.1:/private/var/mobile/Library/Caches/com.saurik.Cydia/archives/com.haoict.messengernoads_0.0.2_iphoneos-arm.deb ./ 把deb裡面的dylib拆出來使用betterzip把dylib拿出來 安裝betterzip 1brew cask install betterzip Extract data 持續解壓縮data並獲得Library 獲得dylib 把Messenger砸殼frida砸殼Clutch砸殼 桌面建立一個資料夾，裡面要有這些東西 砸殼的應用 libsubstrate.dylib 插件的dylib 解壓縮砸殼應用1unzip Messenger.ipa 把libsubstrate.dylib、messengernoads.dylib丟進去Payload/Messenger等等會用到 進入Payload/Messenger修改info.plist 把下圖內容刪除 這些是支援的設備，若要支援所有的設備這個KEY必須刪除 打開終端機並移動到Payload/Messenger底下 查看messengernoads.dylib 1otool -L messengernoads.dylib 會看到越獄手機才會用到的CydiaSubstrate 利用install_name_tool替換CydiaSubstrate -&gt; libsubstrate.dylib 1install_name_tool -change /Library/Frameworks/CydiaSubstrate.framework/CydiaSubstrate @loader_path/libsubstrate.dylib messengernoads.dylib 再次查看messengernoads.dylib 1otool -L messengernoads.dylib 會發現原來的文件路徑改為絕對路徑表示成功 利用optool把dylib注入到目標的二進文件1optool install -c load -p \"@executable_path/messengernoads.dylib\" -t ./Messenger 結果如下，表示成功 重新包裝iPA檔案 將Payload壓縮 更改壓縮檔案附檔名為xxx.ipa 重簽名絕對學的會的方法連結","categories":[{"name":"Jailbreak","slug":"Jailbreak","permalink":"https://ios.league2eb.me/categories/Jailbreak/"}],"tags":[{"name":"iOS","slug":"iOS","permalink":"https://ios.league2eb.me/tags/iOS/"},{"name":"Mac","slug":"Mac","permalink":"https://ios.league2eb.me/tags/Mac/"},{"name":"Jailbreak","slug":"Jailbreak","permalink":"https://ios.league2eb.me/tags/Jailbreak/"}]},{"title":"CoronaTracker","slug":"CoronaTracker","date":"2020-03-17T15:34:47.000Z","updated":"2020-06-04T10:22:39.000Z","comments":true,"path":"posts/a505ca0f/","link":"","permalink":"https://ios.league2eb.me/posts/a505ca0f/","excerpt":"","text":"我覺得很猛，不分享不行！作者 條件 一台蘋果電腦 macOS Catalina以上 brew cask 如果你也是RD，這是RepositoriesCoronaTracker 如果你已經有 brew cask1brew cask install corona-tracker 如果沒有，但你又想安裝打開終端機，他長這樣 輸入下面的指令 安裝Brew1/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\" 過程中如果有請你輸入電腦密碼請注意輸入的時候看不到密碼 安裝Brew cask1brew install caskroom/cask/brew-cask 安裝CoronaTracker1brew cask install corona-tracker","categories":[],"tags":[]},{"title":"移除ipa簽名","slug":"移除ipa簽名","date":"2020-02-13T03:30:39.000Z","updated":"2020-06-04T10:22:39.000Z","comments":true,"path":"posts/34109c5c/","link":"","permalink":"https://ios.league2eb.me/posts/34109c5c/","excerpt":"","text":"為什麼？因為企業簽名的應用下載後看了很賭爛想要移除 先把ipa弄成APP1unzip xxx.ipa 進入Payload中的xxx.app1codesign --remove-signature xxx 移除xxx.app中所有Frameworks簽名1codesign --remove-signature Alamofire.framework 每一個都要 壓縮Payload後把壓縮檔改副檔名…","categories":[],"tags":[{"name":"iOS","slug":"iOS","permalink":"https://ios.league2eb.me/tags/iOS/"},{"name":"Mac","slug":"Mac","permalink":"https://ios.league2eb.me/tags/Mac/"}]},{"title":"獲取ipa中的Schemes","slug":"獲取應用Schemes","date":"2020-02-08T16:14:39.000Z","updated":"2020-06-05T21:01:52.000Z","comments":true,"path":"posts/bc44b46b/","link":"","permalink":"https://ios.league2eb.me/posts/bc44b46b/","excerpt":"","text":"需求有跳轉其他應用需求時可能會需要查找該應用的Schemes來達到目標 取得ipaAPP砸殼正確姿勢 執行腳本取得ipa後，利用下面的腳本來dump出所有的Schemes 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263 #!/bin/sh RESET=`tput sgr0`RED=`tput setaf 1`GREEN=`tput setaf 2`if [ \"$1\" ]; then if ! [ -e \"$1\" ] then echo \"⛔️️️️️️️️⛔️⛔️ $&#123;RED&#125;$1 does not exist!\" exit fi echo \"$&#123;RESET&#125;Unzipping...\" if ! [ -e \"$1.zip\" ] then mv \"$1\" \"$1.zip\" fi mkdir \"extractSchemeURLTemp\" unzip \"$1.zip\" -d \"extractSchemeURLTemp\" &amp;&gt;/dev/null echo \"✅ URL Schemes:\" echo \"$&#123;GREEN&#125;\" files=(extractSchemeURLTemp/Payload/*.app) APP_PATH=$&#123;files[0]&#125; echo \"cat /plist/dict/key[text()='CFBundleURLTypes']/following-sibling::array/dict/array/string/text()\" | xmllint --shell $&#123;APP_PATH&#125;/Info.plist | sed '/^\\/ &gt;/d' | sed 's/&lt;[^&gt;]*.//g' mv \"$1.zip\" \"$1\" rm -rf \"extractSchemeURLTemp\"else echo \"$&#123;GREEN&#125;⚙️ Installed extractSchemeURL!\"fiif [ -e scripts/extract-scheme-url.sh ]then cp scripts/extract-scheme-url.sh ~/.extract-scheme-url.sh else if [ -e extract-scheme-url.sh ] then cp extract-scheme-url.sh ~/.extract-scheme-url.sh fifiif [ -e ~/.bashrc ]then string=$(&lt;~/.bashrc) if ! [[ $string == *\"alias extractSchemeURL=\\\"bash ~/.extract-scheme-url.sh\\\"\"* ]]; then echo \"Setting extractSchemeURL...\" echo \"alias extractSchemeURL=\\\"bash ~/.extract-scheme-url.sh\\\"\" &gt;&gt; ~/.bashrc cat ~/.bashrc fielse echo \"Setting extractSchemeURL...\" echo \"alias extractSchemeURL=\\\"bash ~/.extract-scheme-url.sh\\\"\" &gt; ~/.bashrc cat ~/.bashrcfisource ~/.bashrc 出處該腳本來源","categories":[{"name":"iOS","slug":"iOS","permalink":"https://ios.league2eb.me/categories/iOS/"}],"tags":[{"name":"iOS","slug":"iOS","permalink":"https://ios.league2eb.me/tags/iOS/"},{"name":"Jailbreak","slug":"Jailbreak","permalink":"https://ios.league2eb.me/tags/Jailbreak/"}]},{"title":"Resize圖片大小","slug":"Resize圖片大小","date":"2020-02-04T16:02:09.000Z","updated":"2020-06-04T10:22:39.000Z","comments":true,"path":"posts/2da99f33/","link":"","permalink":"https://ios.league2eb.me/posts/2da99f33/","excerpt":"","text":"安裝1brew install imagemagick 不會指令？官網下載 終端指令1magick mogrify -format jpg -resize 50% ./demo.jpg","categories":[{"name":"Shell","slug":"Shell","permalink":"https://ios.league2eb.me/categories/Shell/"}],"tags":[]},{"title":"修改image的Hash","slug":"修改image的Hash","date":"2020-01-16T06:48:14.000Z","updated":"2021-06-27T08:45:09.000Z","comments":true,"path":"posts/662e9349/","link":"","permalink":"https://ios.league2eb.me/posts/662e9349/","excerpt":"","text":"發生錯誤產生條件 專案內有多的Target (不確定是不是因為這樣，但基本上不會需要多個Target) 共用到了相同的一些項目圖片也整個複製過去的混亂情況 原因圖片檔案名稱不同，但使用fastlane打包時提示CompileAssetCatalog的錯誤問題基本上從瞎掰的角度來說，Xcode應該是認知到「欸～你的專案底下有兩張一樣的圖片噢！」但明明已經修改了檔案名稱為什麼還會被這樣認為呢？因為Xcode認的是圖片背後的hash!上述所說的都是我個人亂猜 驗證建立一個資料夾並且放一張圖片 使用指令查看該圖片的hash 1shasum 1.jpeg 結果如圖 複製該張圖片到同一個資料夾，系統會替你加上「拷貝」兩個字 使用指令查看該拷貝圖片的hash 1shasum 1拷貝.jpeg 就算檔案名稱不同，兩個hash是一樣的，Xcode就會認為是同一張圖片？ 解決 安裝ImageMagick 1brew install imagemagick 修改hash(但我覺得這個指令背後做的事情是有壓縮的，但不影響) 修改拷貝圖片的hash 1find . -iname 1拷貝.jpeg -exec echo &#123;&#125; \\; -exec convert &#123;&#125; &#123;&#125; \\; 再次驗證可以清楚的看到兩張圖片的hash確實已經不一樣了 如果想要一次性修改當前目錄下的所有圖片 注意指令內的附檔名 ex *.png or *.jpeg 1find . -iname \"*.png\" -exec echo &#123;&#125; \\; -exec convert &#123;&#125; &#123;&#125; \\;","categories":[{"name":"Xcode","slug":"Xcode","permalink":"https://ios.league2eb.me/categories/Xcode/"}],"tags":[{"name":"Mac","slug":"Mac","permalink":"https://ios.league2eb.me/tags/Mac/"}]},{"title":"Xcode編譯速度優化","slug":"Xcode編譯速度優化","date":"2020-01-08T00:47:31.000Z","updated":"2020-06-05T21:01:52.000Z","comments":true,"path":"posts/ab0abac3/","link":"","permalink":"https://ios.league2eb.me/posts/ab0abac3/","excerpt":"","text":"Xcode有幾個隱藏的開關選項編譯結束後告訴你這次跑了多少時間 打開終端機並輸入 1defaults write com.apple.dt.Xcode ShowBuildOperationDuration -bool YES 結果會像是這樣子 查看當前CPU數量1sysctl -n hw.ncpu 催下去把Xcode編譯時使用的核心數量拉到最大 1defaults write com.apple.dt.Xcode IDEBuildOperationMaxNumberOfConcurrentCompileTasks `sysctl -n hw.ncpu`","categories":[{"name":"iOS","slug":"iOS","permalink":"https://ios.league2eb.me/categories/iOS/"}],"tags":[{"name":"Xcode","slug":"Xcode","permalink":"https://ios.league2eb.me/tags/Xcode/"},{"name":"CPU","slug":"CPU","permalink":"https://ios.league2eb.me/tags/CPU/"}]},{"title":"powerlevel9k换powerlevel10k","slug":"powerlevel9k换powerlevel10k","date":"2020-01-06T06:20:33.000Z","updated":"2020-06-04T10:22:39.000Z","comments":true,"path":"posts/b85206ec/","link":"","permalink":"https://ios.league2eb.me/posts/b85206ec/","excerpt":"","text":"據前輩說：powerlevel10k的速度比powerlevel9k快？就算沒有比較快，但就是要用最新的東西，因為這就是潮 安裝打開iTerm，移動一下 1cd ~ 安裝 12git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ~/powerlevel10kecho 'source ~/powerlevel10k/powerlevel10k.zsh-theme' &gt;&gt;! ~/.zshrc 編輯.zshrc 這個檔案會在 ~/底下修改ZSH_THEME=”powerlevel9k/powerlevel9k”↓↓↓↓↓↓↓↓↓↓↓↓↓↓ 1ZSH_THEME=\"powerlevel10k/powerlevel10k\" 儲存後關閉 檢查是否正確安裝1ls ~/.oh-my-zsh/custom/themes 如果安裝成功會出現powerlevel10k 如果沒有…那就再下一次指令 1git clone --depth=1 https://github.com/romkatv/powerlevel10k.git $ZSH_CUSTOM/themes/powerlevel10k 設定1p10k configure 按照畫面上的提示選擇自己想要的就可以了 結束如果想要設定更細節的東西 1vi ~/.p10k.zsh","categories":[],"tags":[{"name":"Mac","slug":"Mac","permalink":"https://ios.league2eb.me/tags/Mac/"}]},{"title":"iOS_Cocoapods避坑製作流程","slug":"iOS-Framework製作流程","date":"2019-12-30T07:32:07.000Z","updated":"2020-06-05T21:01:52.000Z","comments":true,"path":"posts/3ff540f7/","link":"","permalink":"https://ios.league2eb.me/posts/3ff540f7/","excerpt":"","text":"Set By Set新增框架專案開啟終端機並且移動到你想要創立框架的位置(這邊舉例桌面) 1cd ~/Desktop 建立專案 1pod lib create HelloMyFramwork 你將會碰到幾個問題 What platform do you want to use?? (你是為了什麼平台？) [iOS / macOS] What language do you want to use?? (你想要使用什麼語言？) [Swift / ObjC] Would you like to include a demo application with your library? (你是否想要在你的核心框架中給一個範例？) [Yes / No] Which testing frameworks will you use? (你想使用哪種測試框架來進行測試？) [Quick / None] Would you like to do view based testing? [Yes / No] 開啟專案後刪除測試相關檔案Pods 明明已經沒有選擇測試相關選項但仍然有出現測試檔案 原因未知 刪除框架專案中的「測試」目標與資料夾 Example 打開Example中的podfile 刪除測試的Target (圈起來的通通拿掉) 選擇Example專案並刪除測試Target 刪除測試資料夾 刪除Example中Pods資料夾底下與測試相關的檔案 刪除Example中Frameworks資料夾底下的測試框架 好，終於刪除所有測試的檔案了可以去泡杯咖啡抽跟菸喘一下 (累.PNG) 編輯podspec 修改框架支援OS版本 新增指令框架使用Swift語言 關閉Xcode 並且 pod install每次有新增Flle或者XIB檔案等等操作都需要pod insasll 1pod install 文件介紹_Pods.xcodeproj這是cocoapods的專案檔，裡面包含自己定義的框架 podspec你可以把它想像成「描述框架文件」主要說明作者、版本、使用許可、倉庫地址甚至是支援版本 Example範例專案，這個就不用多解釋了 你建立的框架名稱資料夾這個範例的名稱叫做「HelloMyCocoapods」這裡面基本上會包含兩個資料夾 Assets 用來放置圖片、XIB等等資源 Classes 用來放置File File從專案左側的資料夾可以看見一個很顯眼的File名叫「ReplaceMe」這個命名也挺有意思，就是請你取代他點開該文件發會發現空白，沒有任何說明(也可能官網有放說明…我沒看)這邊有幾個狀況要特別再三說明，這些狀況我覺得其實應該大多數的網路文章都沒有仔細說明這塊以下是我個人的經驗總結 新增資料夾檔案很多，總該要有資料夾來做為分類管理後面加入的Resopurce如果也需要資料夾分類管理，方法一樣 首先我們在我 Classes 底下建立兩個資料夾並命名為「Manager」與「Util」 回到框架的專案內並建立兩個File 新增File在Pods底下直接cmd+N來新建立兩個.swift直接指定好File到剛剛建立的資料夾底下 確認文件位置 確認好.swift的檔案有儲存到正確的位置 如果資料夾內沒有任何.swift的文件，後續pod install後該資料夾不會在Xcode中顯示 終端機 cd 到 Example資料夾底下1pod install Podspec說明123456789101112131415161718192021222324252627282930313233343536373839404142434445Pod::Spec.new do |s| #---框架外部資訊相關---# #框架名稱(required) s.name = 'HelloMyCocoapods' #框架版本，每次更新都得來這邊修改(required) s.version = '0.1.0' #簡介 s.summary = '沒有一堆幹話的精簡介紹' #長介 s.description = &lt;&lt;-DESC 更詳細的介紹 DESC #專案主頁面(required) s.homepage = 'https://github.com/League2EB/HelloMyCocoapods' #如果是UI相關框架，可以放擷圖來展示 # s.screenshots = 'www.example.com/screenshots_1', 'www.example.com/screenshots_2' #使用許可證(required) s.license = &#123; :type =&gt; 'MIT', :file =&gt; 'LICENSE' &#125; #維護人員資訊(required) s.author = &#123; 'Lazy' =&gt; 'Lazy@Lazy.com' &#125; #如果是多人維護 #spec.authors = &#123; 'Lazy1' =&gt; 'Lazy1@Lazy1.com','Lazy2' =&gt; 'Lazy2@Lazy2.com' &#125; #---框架內部資源相關---# #目標語言版本 s.swift_version = '5.0' #框架位置(required) s.source = &#123; :git =&gt; 'https://github.com/League2EB/HelloMyCocoapods.git', :tag =&gt; s.version.to_s &#125; #框架部屬目標版本 s.ios.deployment_target = '10.0' #框架文件目錄 s.source_files = 'HelloMyCocoapods/Classes/**/*' #框架圖片資源目錄 s.resource_bundles = &#123; 'HelloMyCocoapodsresource' =&gt; ['HelloMyCocoapods/Assets/**/*.&#123;png,xib,xcassets&#125;'] &#125; #依賴的第三方框架 s.dependency \"RxSwift\" #依賴的系統框架 #s.frameworks = 'UIKit', 'MapKit'end 依賴如果自己開發的框架中有依賴另外一個第三方框架，可以在podspec中設定 123s.dependency \"RxSwift\"s.dependency \"Moya\"s.dependency \"ObjectMapper\" Resource加入圖片資源檔案或者XIB 首先，選擇框架專案檔案 新增Target 選擇macOS後 右邊輸入Bundle並選擇 Bundle Product Name 千萬不要與框架名稱相同 建議命名 框架名稱+Resource 例如：HelloMyCocoapodsresource 新增一個XIB作為測試，這邊命名為CocoaViewController 打開HelloMyCocoapods.podspec 解開註解並編輯 替換Bundles的名字為剛才取的Product Name 並且宣告將要讀取的資源檔案png,xib,xcassets 附檔名的前後要加入一個波浪括號{}(很多Blog就死不講，害新手打錯找半天) 123s.resource_bundles = &#123; 'HelloMyCocoapodsresource' =&gt; ['HelloMyCocoapods/Assets/*.&#123;png,xib,xcassets&#125;'] &#125; 設定Base SDK 選擇「框架」專案中的Build Settings 項目Architectures裡頭的Base SDK改為「iOS」 在Assets底下建立兩個資料夾 一個叫XIB一個叫IMG(名字隨便你取這邊只是範例) 點選你的框架底下的同名資料夾後 cmd + n 新增一個XIB，並且命名為CocoapodsViewController 新增時直接指定.xib放置的位置為剛剛建立的XIB資料夾 新增一個Asset Catalog 建議使用預設的Media.xcassets 新增時直接指定.xcassets放置的位置為剛剛建立的IMG資料夾 把這兩個檔案「各別」放置到剛剛建立的XIB、IMG資料夾去 關閉Xcode 再次pod install 1pod install 打開專案，應該要自動出現Resources這個資料夾，若有便是成功 新增圖片資源資料夾 作法一樣但要特別注意名稱，不要命名與Example一樣為Images.xcassets 建議使用預設的Media.xcassets- 原因除了Xcode會替我們優化圖片的載入速度之外還有避免被逆向工程之後導出圖片的可能~如圖，圖片都被壓縮在Assets.car裡面了，可能是我逆向的能力不足但我自己本身拆解不開…. 載入速度確實會比較快，但我還是找到破解Assets.car的方法了…. 結束基本上執行到這裡就算是完成了，Example的專案理當也可以使用框架中有開放的類別或者Resource的資源了","categories":[{"name":"iOS","slug":"iOS","permalink":"https://ios.league2eb.me/categories/iOS/"}],"tags":[{"name":"Xcode","slug":"Xcode","permalink":"https://ios.league2eb.me/tags/Xcode/"},{"name":"Framework","slug":"Framework","permalink":"https://ios.league2eb.me/tags/Framework/"},{"name":"Pods","slug":"Pods","permalink":"https://ios.league2eb.me/tags/Pods/"}]},{"title":"完整清除pod","slug":"完整清除pod","date":"2019-12-17T06:54:41.000Z","updated":"2020-06-05T21:01:52.000Z","comments":true,"path":"posts/9a4a4d19/","link":"","permalink":"https://ios.league2eb.me/posts/9a4a4d19/","excerpt":"","text":"前言有時候，常常會碰到pod導致Xcode專案Run不起來的怪異問題以前的作法是 手動砍podfile.lock 手動砍xcworkspace 手動砍pods 幹 結果，還是跑不起來 解決 - 不囉嗦直上代碼1pod deintegrate 1sudo gem install cocoapods-clean 1pod clean 執行下面一個指令之前，去專案內搜尋只要有Pods名稱的通通砍掉 1pod setup 1pod install","categories":[{"name":"iOS","slug":"iOS","permalink":"https://ios.league2eb.me/categories/iOS/"}],"tags":[{"name":"Xcode","slug":"Xcode","permalink":"https://ios.league2eb.me/tags/Xcode/"},{"name":"Pods","slug":"Pods","permalink":"https://ios.league2eb.me/tags/Pods/"}]},{"title":"Xcode 11 Application Loader 找回","slug":"ApplicationLoader","date":"2019-10-27T20:29:13.000Z","updated":"2020-06-04T10:22:39.000Z","comments":true,"path":"posts/55188126/","link":"","permalink":"https://ios.league2eb.me/posts/55188126/","excerpt":"","text":"Xcode11 ，蘋果把Application Loader給刪除了，怎麼辦？下載到爆","categories":[],"tags":[{"name":"Xcode、iOS","slug":"Xcode、iOS","permalink":"https://ios.league2eb.me/tags/Xcode、iOS/"}]},{"title":"Fastlane + Shell 打包ipa(包含憑證設定)","slug":"FastlaneError","date":"2019-10-27T04:28:12.000Z","updated":"2020-06-04T10:22:39.000Z","comments":true,"path":"posts/4611262f/","link":"","permalink":"https://ios.league2eb.me/posts/4611262f/","excerpt":"","text":"前言更新Xcode11 + macOS Catalina後原本的腳本就失效覺得很賭爛，光是解決該問題就花了我六小時所以果斷寫成一篇流程，跟著走絕對可以OneKeyToBuild !備註：OneKeyToBuild源自於OneKeyToWin外掛，有興趣自己Google 安裝Fastlane 先打開終端機(別覺得我說廢話，我曾經就是不知道網路上這些指令要在哪裡下) 安裝xcode-select 1xcode-select --install 使用homebrew，安裝Fastlane 沒有homebrew？安裝 1brew cask install fastlane 先產生Certificate Signing Request 打開mac裡面的鑰匙圈 選擇製作本地要求憑證 選擇儲存到磁碟，並且輸入email與名稱，認真可以隨便打 儲存到桌面或者任何地方，用完可以刪除不刪除也可以(未來搞不好又用到，例如申請推播) 長這樣 憑證設定(這邊以正式發佈證書來做為範例) 去開發者帳號後台選擇Certificates, Identifiers &amp; Profile 點選加號來新增開發者證書 選擇Apple Distribution後點選右上角Continue 這邊特別說明一下從Xcode11之後只需要下載Apple Distribution or Apple Development就可以簽署所有平台應用包刮MacOS iPadOS 點擊Choose File後找到已經製作好的Certificate Signing Request 好，我就當做你現在不知道要選擇哪個檔案那就看圖，有沒有覺得剛剛才看過？ 選完之後點擊點選右上角Continue後會出現這個畫面，再點擊下載 點兩下加入到Mac的鑰匙圈 新增一個App Identifiers 點擊藍色 + 新增一個應用ID 選擇 App IDs 填寫應用資訊 設定發佈憑證 點擊左邊Profile並點擊藍色＋進行憑證新增 選擇App Store 後點擊右上角Continue 選擇上一個環節所建立好的App Identifiers，並點擊右上角Continue 如果沒有意外你應該只有一個選項 設定描述檔的名稱 我會這樣寫HelloMyDemo_Release 下載描述檔，然後建議把該描述檔放到你的專案資料夾裡面 為什麼？好管理阿不然你一百個應用一百個描述檔你檔案會很難找 懂得分類的是身為工程師的基本技能 Xcode內設定 選擇Signing &amp; Capabilities 選擇Release(看箭頭) 取消自動簽署(不要問為什麼，你會怕) import上一個環節建立的描述檔案 新增打包ReleaseExportOptions.plist 打開文字編輯器或者Sublime然後把下面的Code貼上 修完畢後把該檔案儲存在專案資料夾內 命名為ReleaseExportOptions.plist 123456789101112131415161718192021222324252627&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"&gt;&lt;plist version=\"1.0\"&gt;&lt;dict&gt; &lt;key&gt;compileBitcode&lt;/key&gt; &lt;true/&gt; &lt;key&gt;destination&lt;/key&gt; &lt;string&gt;export&lt;/string&gt; &lt;key&gt;method&lt;/key&gt; &lt;string&gt;Release&lt;/string&gt; &lt;key&gt;provisioningProfiles&lt;/key&gt; &lt;dict&gt; &lt;key&gt;應用BundleID ex: com.xx.sample&lt;/key&gt; &lt;string&gt;描述檔名稱就好，後面的mobileprovision不用&lt;/string&gt; &lt;/dict&gt; &lt;key&gt;signingCertificate&lt;/key&gt; &lt;string&gt;看鑰匙圈裡面憑證的名稱，整個複製上來 ex: Apple Distribution: 你的名稱 (1234567890)&lt;/string&gt; &lt;key&gt;signingStyle&lt;/key&gt; &lt;string&gt;manual&lt;/string&gt; &lt;key&gt;stripSwiftSymbols&lt;/key&gt; &lt;true/&gt; &lt;key&gt;teamID&lt;/key&gt; &lt;string&gt;跟上面的1234567890一樣&lt;/string&gt; &lt;key&gt;thinning&lt;/key&gt; &lt;string&gt;&amp;lt;none&amp;gt;&lt;/string&gt;&lt;/dict&gt;&lt;/plist&gt; 新增打包腳本 打開文字編輯器或者Sublime然後把下面的Code貼上 申請專用密碼 修改下面內容 帳號 專用密碼 scheme 修完畢後把該檔案儲存在專案資料夾內 命名為Release.sh 打開終端機cd到專案資料夾 指令 chmod +x Release.sh (打開檔案權限) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051#設置超時export FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT=120#APP Store帳號A=\"example@gmail.com\"#專用密碼密碼P=\"這個密碼是專用密碼，不是開發者帳號的密碼\"#計時SECONDS=0#假設腳本放置在與項目相同的路徑下project_path=$(pwd)#取當前時間字符串添加到文件結尾now=$(date +\"%Y_%m_%d_%H_%M_%S\")#指定項目的scheme名稱scheme=\"scheme名稱 ex : HelloMyDemo\"#指定要打包的配置名#測試環境測試包 configuration=\"Debug\"#正式環境測試包 configuration=\"Release\"configuration=\"Release\"#指定打包所使用的輸出方式，目前支持app-store, package, ad-hoc, enterprise, development, 和developer-id，即xcodebuild的method參數export_method='app-store'#指定項目地址workspace_path=\"$project_path/$&#123;scheme&#125;.xcworkspace\"#指定輸出路徑output_path=\"$project_path/build/\"#指定輸出歸檔文件地址archive_path=\"$output_path/$&#123;scheme&#125;_$&#123;now&#125;.xcarchive\"#指定輸出ipa地址ipa_path=\"$output_path/$&#123;scheme&#125;_$&#123;now&#125;.ipa\"#指定輸出ipa名稱ipa_name=\"$&#123;scheme&#125;_$&#123;now&#125;.ipa\"#獲取執行命令時的commit messagecommit_msg=\"$1\"#同意訪問鑰匙圈allowPV=\"-allowProvisioningUpdates\"#ApplicationLoader路徑altoolPath=\"/Applications/Xcode.app/Contents/Applications/Application Loader.app/Contents/Frameworks/ITunesSoftwareService.framework/Versions/A/Support/altool\"#打包的plist設定exoplist=\"$project_path/ReleaseExportOptions.plist\"#輸出設定的變量值echo \"===workspace path: $&#123;workspace_path&#125;===\"echo \"===archive path: $&#123;archive_path&#125;===\"echo \"===ipa path: $&#123;ipa_path&#125;===\"echo \"===export method: $&#123;export_method&#125;===\"echo \"===commit msg: $1===\"#先清空前一次buildfastlane gym --silent true --workspace $&#123;workspace_path&#125; --scheme $&#123;scheme&#125; --clean --configuration $&#123;configuration&#125; --archive_path $&#123;archive_path&#125; --export_method $&#123;export_method&#125; --output_directory $&#123;output_path &#125; --output_name $&#123;ipa_name&#125; --export_xcargs $&#123;allowPV&#125; --export_options $&#123;exoplist&#125;#上傳到iTunes Connect\"$altoolPath\" --upload-app -f $&#123;ipa_path&#125; -t ios -u \"$A\" -p \"$P\"osascript -e 'display notification \"上傳完成\"'#輸出總用時echo \"===Finished. Total time: $&#123;SECONDS&#125;s===\" 打包 cd 到專案目錄底下 指令 ./Release.sh 這個腳本有替您自動上傳到開發者帳號裡面的App Store Connect，但前提是你要先創好應用…(廢話)","categories":[{"name":"Shell","slug":"Shell","permalink":"https://ios.league2eb.me/categories/Shell/"}],"tags":[]},{"title":"使用記憶體位置進行FunctionHook","slug":"使用記憶體位置進行FunctionHook","date":"2019-10-20T18:16:17.000Z","updated":"2020-06-04T10:22:39.000Z","comments":true,"path":"posts/7eacf7f7/","link":"","permalink":"https://ios.league2eb.me/posts/7eacf7f7/","excerpt":"","text":"注意：這招只可以運行在越獄環境的手機中該需求的產生是因為某個Swift的方法Hook很麻煩，所以硬幹出來的 這次的目標是「手機音樂電台」 首先我從Appdelegate中發現了很可疑的關鍵字 disableAD 進去看了之後確定這個disableAD是一個由Swift類別封裝起來的方法 搜尋了一下該方法後看到他的記憶體位置 1234這邊要特別說一下關於，這個記憶體位置由於我是使用ARM64設備砸殼出來，所以記憶體位置會如我們所看到的是0x1002cdbe8但如果今天砸殼的設備晶片是ARMv7或者其他型號，那該記憶體位置就會不同後面的程式碼就必須要針對其他型號做Hook，相當麻煩... 寫Code import必要框架 123#import &lt;substrate.h&gt;#import &lt;dlfcn.h&gt;#import &lt;mach-o/dyld.h&gt; 寫一個獲取記憶體位置的方法 123uint64_t getRealOffset(uint64_t offset) &#123; return _dyld_get_image_vmaddr_slide(0) + offset;&#125; 拿出舊的方法返回值 1BOOL (*orig_disableAd)(); 宣告新的值 123BOOL new_disableAd() &#123; return YES;&#125; 最後在ctor把新的值，利用我們已知道的記憶體位置(0x1002cdbe8)直接串改 123%ctor &#123; MSHookFunction((void*)getRealOffset(0x1002cdbe8),(void*)new_disableAd,(void**)&amp;orig_disableAd);&#125; 結論：這個方法很硬派，自用倒是無所謂若是要開放到Cydia上面要三思","categories":[{"name":"Jailbreak","slug":"Jailbreak","permalink":"https://ios.league2eb.me/categories/Jailbreak/"}],"tags":[]},{"title":"BinaryHack","slug":"BinaryHack","date":"2019-10-18T09:49:00.000Z","updated":"2020-06-04T10:22:39.000Z","comments":true,"path":"posts/508802c9/","link":"","permalink":"https://ios.league2eb.me/posts/508802c9/","excerpt":"","text":"TODO://","categories":[{"name":"Jailbreak","slug":"Jailbreak","permalink":"https://ios.league2eb.me/categories/Jailbreak/"}],"tags":[]},{"title":"利用imagemagick將HEIC轉PNG","slug":"利用imagemagick將HEIC轉PNG","date":"2019-10-15T08:23:34.000Z","updated":"2020-06-04T10:22:39.000Z","comments":true,"path":"posts/83fe1b07/","link":"","permalink":"https://ios.league2eb.me/posts/83fe1b07/","excerpt":"","text":"安裝imagemagick1brew install imagemagick 轉檔1magick convert demo.HEIC demo.png 如果你要一次轉很多個檔案1magick mogrify -monitor -format png *.HEIC","categories":[{"name":"Shell","slug":"Shell","permalink":"https://ios.league2eb.me/categories/Shell/"}],"tags":[]},{"title":"Clutch砸殼流程","slug":"Clutch砸殼流程","date":"2019-09-22T18:01:58.000Z","updated":"2020-06-04T10:22:39.000Z","comments":true,"path":"posts/e0179831/","link":"","permalink":"https://ios.league2eb.me/posts/e0179831/","excerpt":"","text":"前言由於在iOS9設備上一直搞不定frida的砸殼所以進而研究Clutch的砸殼 首先這邊下載Clutch-2.0.4檔案下載 將下載的檔案放到越獄手機中/usr/bin (可以利用iMazing或者scp) 開啟檔案權限 1chmod +x Clutch-2.0.4 列出已經安裝在手機中的軟體 1Clutch-2.0.4 -i 砸 ! (後面可以填寫數字或者BundleID) 1Clutch-2.0.4 com.one.goodnight 移動到砸殼後的ipa路徑 1cd /private/var/mobile/Documents/Dumped/ 將砸殼後的ipa改個名稱，你也可以不改 1mv com.xxx.xxx-iOS9.0-\\(Clutch-2.0.4\\).ipa 隨便.ipa 補充為什麼這時代還要特別用iOS9來砸殼取出ipa ?因為手邊的iPhone5 (ARMv7) 剛好是iOS9而ARMv7的二進制檔案在hopper disassembler中的偽代碼會比ARM64的好看懂！","categories":[{"name":"Jailbreak","slug":"Jailbreak","permalink":"https://ios.league2eb.me/categories/Jailbreak/"}],"tags":[]},{"title":"越獄開發常用指與路徑","slug":"越獄開發常用指與路徑","date":"2019-09-19T06:50:33.000Z","updated":"2020-09-28T20:01:11.000Z","comments":true,"path":"posts/95bff353/","link":"","permalink":"https://ios.league2eb.me/posts/95bff353/","excerpt":"","text":"因為智商不算是足夠，所以必須寫一篇來記錄一下常用指令還有一些路徑直到記起來為止反正有打一次記不起來指令，那就打兩次。 指令相關從越獄手機傳送檔案到Mac 1scp -P2222 root@localhost:目標路徑 ./ 從Mac傳送檔案到越獄手機 1scp -P 2222 (mac文件路徑) root@localhost:(移動設備路徑) 建立新的Tweak 1$THEOS/bin/nic.pl 安裝Tweak到手機 1make clean &amp;&amp; make package &amp;&amp; make install 打包正式版本 1make clean &amp;&amp; make package FINALPACKAGE=1 查看該二進制文件是否已經砸殼 1otool -l xxx | grep crypt 在越獄手機ReSpringBoard 1killall -9 SpringBoard 使用sshpass指定密碼 1sshpass -p alpine 進入安全模式 1killall -SEGV SpringBoard tvOS ReSpringBoard 1killall -9 PineBoard Sublime相關開啟左側樹狀 12cmd + kcmd + b 搜尋所有檔案中有包含的內容 1cmd+shift+F 直接跳到某個檔案 1cmd+p 路徑相關UIKit(iOS 10) 1/Library/Developer/CoreSimulator/Profiles/Runtimes/iOS 10.3.simruntime/Contents/Resources/RuntimeRoot/System/Library/Frameworks UIKitCore(iOS 12) 1/Library/Developer/CoreSimulator/Profiles/Runtimes/iOS 12.0.simruntime/Contents/Resources/RuntimeRoot/System/Library/PrivateFrameworks 獲取安裝的deb (安裝完畢第一時間有效，但如果點擊Respring該deb就會被刪除) 1/private/var/mobile/Library/Caches/com.saurik.Cydia/archives/ CydiaSubstrate.h檔案位置 (你要有安裝Thoes才有…) 1/opt/theos/vendor/lib/CydiaSubstrate.framework/Headers/ dylib在越獄設備底下的Path 1/Library/MobileSubstrate/DynmicLibraries 文獻相關網站Preferences Specifier","categories":[{"name":"Jailbreak","slug":"Jailbreak","permalink":"https://ios.league2eb.me/categories/Jailbreak/"}],"tags":[]},{"title":"關於Entitlement","slug":"關於Entitlement","date":"2019-09-17T06:31:55.000Z","updated":"2020-06-04T10:22:39.000Z","comments":true,"path":"posts/4c5cd99b/","link":"","permalink":"https://ios.league2eb.me/posts/4c5cd99b/","excerpt":"","text":"Entitlement是iOS系統功能權限的聲明通常像是iCloud、推播等等但其實蘋果有隱藏很多的entitlement是給系統APP使用在JB後可以通過簽名手段來開啟一些原本無法使用的服務。 但如果想破解的應用裡面有使用到需要Entitlement來啟動的功能那在逆向的時候必須要把該功能的Server驗證給取消至於該怎麼取消？ 自己找！這邊說的自己找，是指你要從核心Framework裡面的方法去找","categories":[{"name":"Jailbreak","slug":"Jailbreak","permalink":"https://ios.league2eb.me/categories/Jailbreak/"}],"tags":[]},{"title":"Tweak與砸殼ipa做合併流程筆記","slug":"Tweak與砸殼ipa做合併流程筆記","date":"2019-09-17T06:31:02.000Z","updated":"2020-06-04T10:22:39.000Z","comments":true,"path":"posts/6c15d72f/","link":"","permalink":"https://ios.league2eb.me/posts/6c15d72f/","excerpt":"","text":"Tweak與砸殼ipa做合併流程講解 1.先把砸殼後的ipa複製到已經建立的Tweak資料夾底下下面是確認是否ipa已經砸殼成功方法 1otool -l xxx | grep crypt 2.把packages裡面的deb檔案全部刪除 3.安裝theos-jailed -&gt; https://tinyurl.com/y69vwoal這是一個模版，可以說是擴充Thoes的套件 4.安裝 ios-deploy -&gt; https://tinyurl.com/y3f77a7k協助安裝打包ipa的工具 5.編輯Makefile 1make clean &amp;&amp; make package 5.登入開發者帳號建立一個APPID並且BundleID選擇Wildcard內容輸入com.name.* (name自己取) 6.建立Profile並且選擇第五步驟建立的ID，並選擇設備建立完畢後下載(建議放到tweak底下的資料夾，好找) 7.cd 到Tweak資料夾 1make package PROFILE=xxxxxx.mobileprovision 完成後packages裡面應該要出現砸殼APP與Tweak合併後的ipa 8.移除手機內相同的應用，不然會出現Error 0xe8000022錯誤問題 9.手機插電腦在Tweak資料夾下指令 1make install 若依然出現Error 0xe8000022，手機重新開機電腦重新開機 10.cd 到.thoes/Payload/xxx.app下指令 1otool xxx的binary -l 可以檢查Tweak是否被inject到應用裡面","categories":[{"name":"Jailbreak","slug":"Jailbreak","permalink":"https://ios.league2eb.me/categories/Jailbreak/"}],"tags":[]},{"title":"越獄筆記","slug":"越獄筆記","date":"2019-09-17T04:33:14.000Z","updated":"2020-06-04T10:22:39.000Z","comments":true,"path":"posts/ed5a19cc/","link":"","permalink":"https://ios.league2eb.me/posts/ed5a19cc/","excerpt":"","text":"快速砸殼之前有發過一篇關於砸殼的文章，我認為那是最佳也最好的方法後來就發現了CrackerXI +這個靠北的東西(白忙一場)這裡下載v1.1.6版本的deb，如果覺得有毒那就自己去找一下Repo吧下載利用CrackerXI + 砸殼之後需要把已被砸殼的ipa傳送到Mac，這邊使用SCP來完成 1scp -P2222 root@localhost:/var/mobile/Documents/CrackerXI/FHMBookCity_2.9.80_CrackerXI.ipa ./ MSHookIvar訪問私有變數在Logos上方導入substrate.h 1#import &lt;substrate.h&gt; 寫下你從Hopper看到的類別，下面是舉例 1234@interface SampleObject: NSObject &#123; unsigned long long m_visibleRows;&#125;@end 在你想要的地方訪問 12//後面的 = 1 是改變這個變數的值 MSHookIvar&lt;unsigned long long&gt;(self, \"m_visibleRows\") = 1; ◎ iOS 系統原生所有的操作都不會動到系統任何檔案 ◎ %ctor tweak載入時會進入的第一點，這可以用來DEBUG Layout內檔案說明分別有五種 安裝前 preinst 安裝後 postinst 移除前 prerm 移除後 postrm 最後一種叫 extrainst 參考 這些是告訴系統，在這些狀態之後要做Respring這件事情有趣的事情是，雖然我們是安裝後才需要respring，照理說應該是寫在 postinst但是寫在 preinst 也是會通然後如果因為某些原因你必須用很複雜的安裝前安裝後指令的話，你可以寫一個程式，然後把它叫做這四個名稱的其中一個，他也會在該時間點執行不一定只能寫 script http://iphonedevwiki.net/index.php/Preferences_specifier_plist","categories":[{"name":"Jailbreak","slug":"Jailbreak","permalink":"https://ios.league2eb.me/categories/Jailbreak/"}],"tags":[]},{"title":"APP砸殼正確姿勢","slug":"APP砸殼正確姿勢","date":"2019-09-17T03:05:45.000Z","updated":"2020-06-04T10:22:39.000Z","comments":true,"path":"posts/b6771505/","link":"","permalink":"https://ios.league2eb.me/posts/b6771505/","excerpt":"","text":"前言：從App Store下載下來的APP，經過了一層蘋果的加密需要先砸殼後才可以進行分析加入軟體源1https://build.frida.re 安裝frida 在Mac上安裝pip1sudo easy_install pip 安裝與升級frida1pip install --user frida 1sudo easy_install --upgrade frida 安裝frida cli1pip install frida-tools 在你想要的地方建立一個frida的資料夾1mkdir Frida 把frida-ios-dump clone到你剛剛創的資料夾1git clone https://github.com/AloneMonkey/frida-ios-dump Frida/ cd到frida-ios-dump資料夾裡面，並安裝依賴套件cd 1sudo pip install -r requirements.txt 安裝 1sudo pip install -r requirements.txt 修改dump.py其實好像不用改…預設就這樣子除非你的越獄手機密碼有改 1234User = &apos;root&apos;Password = ‘alpine’Host = &apos;localhost&apos;Port = 2222 開啟你想砸殼的APP在前景，然後下指令來確認我是說先去手機開啟你要砸殼的APP然後 1frida-ps -Ua 看起來會像是這樣子(圖)這邊就是要你確認想要砸殼的應用是不是有被偵測到以及複製好你要砸殼的BundleID(名稱也可以，但建議用BundleID比較穩) 砸殼終端機位置仍然是frida-ios-dump底下然後 12./dump.py com.google.Maps後面的com.google.Maps是你要砸殼的APPBundleId，這裡只是舉例 最後你會在frida-ios-dump底下看到一個「目標.ipa」就是已經被砸殼的APP了","categories":[{"name":"Jailbreak","slug":"Jailbreak","permalink":"https://ios.league2eb.me/categories/Jailbreak/"}],"tags":[]},{"title":"使用FFmpeg合併影片","slug":"使用FFmpeg合併影片","date":"2019-09-17T02:19:08.000Z","updated":"2020-06-04T10:22:39.000Z","comments":true,"path":"posts/aff04168/","link":"","permalink":"https://ios.league2eb.me/posts/aff04168/","excerpt":"","text":"指令 (安裝ffmpeg) 1brew install ffmpeg 把終端機的目錄移動到你放置影片的資料夾中 1ex: cd Desktop 指令 (把第一段影片轉成.ts檔案) 1ffmpeg -i 第一段影片.MP4 -vcodec copy -acodec copy -vbsf h264_mp4toannexb 1.ts 指令 (把第二段影片轉成.ts檔案) 1ffmpeg -i 第二段影片.MP4 -vcodec copy -acodec copy -vbsf h264_mp4toannexb 2.ts 指令 (合併兩個.ts檔案，並且輸出成mp4) 1ffmpeg -i &quot;concat:1.ts|2.ts&quot; -acodec copy -vcodec copy -absf aac_adtstoasc output.mp4","categories":[{"name":"Shell","slug":"Shell","permalink":"https://ios.league2eb.me/categories/Shell/"}],"tags":[]},{"title":"使用SSH連接越獄手機，並且不要再打密碼","slug":"使用SSH連接越獄手機","date":"2019-09-17T02:17:34.000Z","updated":"2020-06-04T10:22:39.000Z","comments":true,"path":"posts/26217a84/","link":"","permalink":"https://ios.league2eb.me/posts/26217a84/","excerpt":"","text":"2019-09-24更新安裝usbmuxd 1brew install usbmuxd 安裝usbmuxd後會自動安裝iproxy，開Port吧 1iproxy 2222 22 以上命令就是把當前連接設備的22端口(SSH端口)映射到電腦的2222端口，那麼想和設備22端口連接，就直接連線2222就可以啦 12指令：iproxy 2222 22結果：waiting for connection 把手機用線插上電腦新建一個終端窗口執行Mac端命令 1ssh -p 2222 root@127.0.0.1 此時則已經連接上了iPhone|iPad設備越獄設備的默認密碼是 alpine 123ssh -p 4567 root@127.0.0.1root@127.0.0.1&apos;s password: 輸入密碼你的越獄手機:~ root# 免密碼同常看到這裡你電腦裡面應該都已經有rsa鑰匙了鑰匙會在這裡 1cd /Users/你是誰/.ssh/id_rsa.pub 把id_rsa.pub複製到桌面並且改名字為 1authorized_keys 先ssh進去越獄手機確認一下/var/root底下是否已經存在.ssh這個資料夾如果沒有就在var/root底下 1mkdir .ssh 從桌面把鑰匙丟進去這個資料夾(這裡用scp) 1scp -P 2222 ./Desktop/authorized_keys root@127.0.0.1:/var/root/.ssh 我被這個問題困擾很久，因為我都使用root@localhost來連線只要替換設備連線就會需要去刪除known_hosts裡面的紀錄後來改用root@127.0.0.1再每次連線之後都去known_hosts把127.0.0.1改成 127.0.0.2連線完畢之後再改回來就好我是低能理解很慢，但如果你有很多支越獄手機想連線，但是看到這篇之後還是不懂，你可以留言我一定會回你。","categories":[{"name":"Jailbreak","slug":"Jailbreak","permalink":"https://ios.league2eb.me/categories/Jailbreak/"}],"tags":[]},{"title":"獲取LaunchImage名稱","slug":"獲取LaunchImage名稱","date":"2019-09-17T02:16:48.000Z","updated":"2020-06-05T21:01:52.000Z","comments":true,"path":"posts/81bcc84/","link":"","permalink":"https://ios.league2eb.me/posts/81bcc84/","excerpt":"","text":"如果你不想要用LaunchScreen.storyboard而是使用Launch Image Source然後第一個畫面你想要拿到跟Launch Image Source的同一張圖片 1234567891011121314151617181920212223242526272829303132func getCurrentLaunchImage() -&gt; UIImage? &#123; guard let launchImages = Bundle.main.infoDictionary?[\"UILaunchImages\"] as? [[String: Any]] else &#123; return nil &#125; let screenSize = UIScreen.main.bounds.size var interfaceOrientation: String switch UIApplication.shared.statusBarOrientation &#123; case .portrait, .portraitUpsideDown: interfaceOrientation = \"Portrait\" default: interfaceOrientation = \"Landscape\" &#125; for launchImage in launchImages &#123; guard let imageSize = launchImage[\"UILaunchImageSize\"] as? String else &#123; continue &#125; let launchImageSize = CGSizeFromString(imageSize) guard let launchImageOrientation = launchImage[\"UILaunchImageOrientation\"] as? String else &#123; continue &#125; if launchImageSize.equalTo(screenSize), launchImageOrientation == interfaceOrientation, let launchImageName = launchImage[\"UILaunchImageName\"] as? String &#123; return UIImage(named: launchImageName) &#125; &#125; return nil&#125;","categories":[{"name":"iOS","slug":"iOS","permalink":"https://ios.league2eb.me/categories/iOS/"}],"tags":[{"name":"Swift","slug":"Swift","permalink":"https://ios.league2eb.me/tags/Swift/"},{"name":"UIApplication","slug":"UIApplication","permalink":"https://ios.league2eb.me/tags/UIApplication/"}]},{"title":"逆時針旋轉動畫","slug":"逆時針旋轉動畫","date":"2019-09-17T02:16:02.000Z","updated":"2020-06-05T21:01:52.000Z","comments":true,"path":"posts/2a188618/","link":"","permalink":"https://ios.league2eb.me/posts/2a188618/","excerpt":"","text":"宣告CGAffineTransform 1private let transformIdentity = CGAffineTransform.identity 你要旋轉的物件 12self.view.transform = self.transformIdentity.rotated(by: 180 * CGFloat(Double.pi))self.view.transform = self.transformIdentity.rotated(by: -1 * CGFloat(Double.pi)) 轉回來 12self.view.transform = CGAffineTransform.identity","categories":[{"name":"iOS","slug":"iOS","permalink":"https://ios.league2eb.me/categories/iOS/"}],"tags":[{"name":"Swift","slug":"Swift","permalink":"https://ios.league2eb.me/tags/Swift/"},{"name":"UIView","slug":"UIView","permalink":"https://ios.league2eb.me/tags/UIView/"}]},{"title":"開啟EC2檔案上傳修改新增權限","slug":"開啟EC2檔案上傳修改新增權限","date":"2019-09-17T02:14:33.000Z","updated":"2020-06-04T10:22:39.000Z","comments":true,"path":"posts/6897ff7c/","link":"","permalink":"https://ios.league2eb.me/posts/6897ff7c/","excerpt":"","text":"12sudo chmod -R 755 /var/www/htmlsudo chmod -R 755 /var/www/html","categories":[{"name":"Shell","slug":"Shell","permalink":"https://ios.league2eb.me/categories/Shell/"}],"tags":[]},{"title":"利用Objective-C提交Google表單","slug":"提交Google表單","date":"2019-09-16T16:03:23.000Z","updated":"2020-06-05T21:01:52.000Z","comments":true,"path":"posts/9f7d908f/","link":"","permalink":"https://ios.league2eb.me/posts/9f7d908f/","excerpt":"","text":"可以拿來幹嘛？ 可以將您想要紀錄的字串、資訊自動填寫到自己建立的Google表單(例如偷偷記錄使用者的帳 號密碼之類？？？？？？)講直白一點就是「利用Google表單建立微型資料庫」 首先創建一個空白的表單 輸入完表單標題後下方的問題欄位狀型態改為「段落」 點選右上角的齒輪 把「需要登入」的選項全部取消後儲存 把表單的網址中複製下來「暫時放到記事本」並且把網址最後面的「edit」刪除 點選右上角「…」再點選「取得預先填入的連結」 隨便輸入一個回答，輸入完畢後點選提交 會看到上方出現一串網址，複製到剪貼簿後會看到其中「entry.201377372」，這是欄位名稱(如果表單中有多個回答就會有多個此欄位，後面會在程式碼中提到，所以這邊就先記著) 欄位像這樣子 9.把剛剛複製的網址貼到瀏覽器並且按下Enter再次點選提交，提交並跳轉後把網址後面的「formResponse」複製起來貼到第5步原本刪除的「edit」位置 所以你的請求網址會像這樣子1https://docs.google.com/forms/d/1TEIA3i4C0uY6Ha3bhM5SkFzCLO61TvLzbxw-2CKDR5Y/formResponse 在專案中新增一個類別叫「GoogleFormRequest」，不囉唆直上代碼GoogleFormRequest.h 123456789101112131415#import &lt;Foundation/Foundation.h&gt;@protocol GoogleFormDelegate &lt;NSObject&gt;@optional- (void)didPOSTRequestSuccess;@end@interface GoogleFormRequest : NSObject@property (nonatomic, strong) id&lt;GoogleFormDelegate&gt; delegate;+ (instancetype)sharedInstance;- (void)postWithSomething:(NSString *)something;@end GoogleFormRequest.m 1234567891011121314151617181920212223242526272829303132333435363738#import \"GoogleFormRequest.h\"static GoogleFormRequest *singletonGoogleFormRequest = nil;@implementation GoogleFormRequest+ (instancetype)sharedInstance &#123; if (singletonGoogleFormRequest == nil) &#123; singletonGoogleFormRequest = [GoogleFormRequest new]; &#125; return singletonGoogleFormRequest;&#125;- (void)postWithSomething:(NSString *)something &#123; //初始化請求 NSMutableURLRequest *urlRequest = [[NSMutableURLRequest alloc]initWithURL:[NSURL URLWithString:你的請求地址]]; /*默認的請求為GET，這邊手動設定為POST 但其實在Google表單的請求中有發現，Google有開GET與POST的API，所以這兩種都可以使用 */ [urlRequest setHTTPMethod:@\"POST\"]; /*設定參數並轉換為Data 允許特殊字符(這邊專門做給輸入中文時使用，英文沒有這困擾) */ NSData *parameterToData = [[[NSString stringWithFormat:@\"你的參數名稱=%@\",something] stringByAddingPercentEncodingWithAllowedCharacters:[NSCharacterSet URLQueryAllowedCharacterSet]] dataUsingEncoding:NSUTF8StringEncoding]; //再把資料放到這段請求的Body中 [urlRequest setHTTPBody:parameterToData]; //請求開始 NSURLSessionDataTask *dataTask = [[NSURLSession sharedSession] dataTaskWithRequest:urlRequest completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) &#123; //宣告網路回應 NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *)response; //訪問允許判斷 if(httpResponse.statusCode == 200) &#123; //看你要幹什麼？ [self.delegate didPOSTRequestSuccess]; &#125; &#125;]; [dataTask resume];&#125;@end ViewController.m 實作 123456789101112131415161718192021222324#import \"ViewController.h\"#import \"GoogleFormRequest.h\"@interface ViewController () &lt;GoogleFormDelegate&gt; &#123; dispatch_queue_t queueSerial;&#125;@property (nonatomic, strong) GoogleFormRequest *comm;@end@implementation ViewController- (void)viewDidLoad &#123; [super viewDidLoad]; queueSerial = dispatch_queue_create(\"comm.queue.serial\", nil); self.comm = [GoogleFormRequest sharedInstance]; self.comm.delegate = self; dispatch_async(queueSerial, ^&#123; [_comm postWithDevice:@\"測試\" WithDate:nil]; &#125;);&#125;- (void)didPOSTRequestSuccess &#123; NSLog(@\"請求成功\");&#125;","categories":[{"name":"iOS","slug":"iOS","permalink":"https://ios.league2eb.me/categories/iOS/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"https://ios.league2eb.me/tags/Objective-C/"},{"name":"NSURLSession","slug":"NSURLSession","permalink":"https://ios.league2eb.me/tags/NSURLSession/"}]},{"title":"App畫面設定為Potait時，讓某個畫面可以旋轉","slug":"App畫面設定為Potait時，讓某個畫面可以旋轉","date":"2019-09-16T15:56:13.000Z","updated":"2020-06-05T21:01:52.000Z","comments":true,"path":"posts/3b0bde26/","link":"","permalink":"https://ios.league2eb.me/posts/3b0bde26/","excerpt":"","text":"當專案的橫豎設定為時(如圖)想讓某個畫面可以旋轉(通常會在影音App出現此需求) 第一步 AppDelegate.m 12345678910-(UIInterfaceOrientationMask)application:(UIApplication *)application supportedInterfaceOrientationsForWindow:(UIWindow *)window &#123; NSUInteger orientations = UIInterfaceOrientationMaskAllButUpsideDown; if(self.window.rootViewController)&#123; UIViewController *presentedViewController = [[(UINavigationController *)self.window.rootViewController viewControllers] lastObject]; orientations = [presentedViewController supportedInterfaceOrientations]; &#125; return orientations;&#125; 第二步 你要可以旋轉的ViewController.m 123-(BOOL)shouldAutorotate&#123; return YES;&#125; 123-(UIInterfaceOrientationMask)supportedInterfaceOrientations&#123; return (UIInterfaceOrientationMaskAll);//依據你的需求更換，這邊設定為全部方向允許&#125; 補充-強制旋轉 1234UIDeviceOrientation deviceOrientation = [UIDevice currentDevice].orientation;if (UIDeviceOrientationIsLandscape(deviceOrientation)) &#123;[[UIDevice currentDevice] setValue:@(UIInterfaceOrientationPortrait) forKey:@\"orientation\"];&#125;","categories":[{"name":"iOS","slug":"iOS","permalink":"https://ios.league2eb.me/categories/iOS/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"https://ios.league2eb.me/tags/Objective-C/"},{"name":"UIViewController","slug":"UIViewController","permalink":"https://ios.league2eb.me/tags/UIViewController/"}]},{"title":"deb製作流程","slug":"deb製作流程","date":"2019-09-16T15:53:55.000Z","updated":"2020-06-04T10:22:39.000Z","comments":true,"path":"posts/dbc90ff0/","link":"","permalink":"https://ios.league2eb.me/posts/dbc90ff0/","excerpt":"","text":"如何打包deb檔案？ 12dpkg-deb -b 資料夾名稱dpkg-deb -bZ lzma 資料夾名稱 如何解包deb檔案？ 1dpkg -x ./deb名稱.deb ./tmp 如何解包deb內的控制檔？ 1dpkg -e ./deb名稱.deb ./temp/DEBIAN 所有資料夾務必清空_DS.Store檔案，代碼如下 12find ./ -iname &quot;.DS_Store&quot; -exec rm &#123;&#125; \\;sudo find . -name &apos;*.DS_Store&apos; -type f -delete 利用ldid重新簽名.app、Framework 1234//.appldid -S ./app名稱.app/app名稱//Frameworksudo ldid -S ./app名稱.app/Frameworks/套件名稱.framework/套件名稱 修改.app權限(此位置要完整) 12sudo chown -R root:wheel /Users/screamlazy/Desktop/資料夾名稱/Applications/app名稱.appsudo chmod 755 /Users/screamlazy/Desktop/資料夾名稱/Applications/app名稱.app/app名稱 查詢.app檔案、Framework是否有用ldid重新簽名並且為armv7 1codesign -vvv 目標位置 確定FrameWork是否有包含到模擬器跟實機 1lipo /Users/名稱/Desktop/app名稱.app/Frameworks/框架名稱.framework/框架名稱 -info 上述檔案重新簽名後 1.桌面建立一個資料夾叫repo2.在資料夾中在建立一個資料夾叫debs3.把打包好的deb檔案丟進去debs的資料夾4.終端機cd到repo底下，並輸入以下代碼 1dpkg-scanpackages debs / &gt; Packages 會看到repo資料夾多出了一個文件叫「Packages」6.打開Packages編輯訊息，基本上不用動7.終端機輸入以下代碼 1bzip2 -fks Packages 會看到打包好的一個壓縮檔叫「Packages.bz2」 8.開啟一個純文字編輯器輸入以下內容並儲存，儲存檔名為「Release」一定要一樣 12345678Origin: Lazy&apos;s RepoLabel: the repo For taiwan PeopleSuite: stableVersion: 0.9Codename: LazyArchitectures: iphoneos-armComponents: mainDescription: the repo For taiwan People","categories":[{"name":"Jailbreak","slug":"Jailbreak","permalink":"https://ios.league2eb.me/categories/Jailbreak/"}],"tags":[]},{"title":"螢幕橫向時的畫面配置","slug":"螢幕橫向時的畫面配置","date":"2019-09-16T15:52:31.000Z","updated":"2020-06-05T21:01:52.000Z","comments":true,"path":"posts/6f2abe47/","link":"","permalink":"https://ios.league2eb.me/posts/6f2abe47/","excerpt":"","text":"12345-(void)viewWillLayoutSubviews &#123; [super viewWillLayoutSubviews]; CGFloat padding = 0; 你的view.frame = CGRectMake(padding, padding, self.view.frame.size.width - padding * 2, self.view.frame.size.height - padding * 2);&#125; 12345override func viewWillLayoutSubviews() &#123; super.viewWillLayoutSubviews() var padding: CGFloat = 0 你的view.frame = CGRect(x: padding, y: padding, width: CGFloat(self.view.frame.size.width - padding * 2), height: CGFloat(self.view.frame.size.height - padding * 2)) &#125;","categories":[{"name":"iOS","slug":"iOS","permalink":"https://ios.league2eb.me/categories/iOS/"}],"tags":[{"name":"UIViewController","slug":"UIViewController","permalink":"https://ios.league2eb.me/tags/UIViewController/"},{"name":"Swift","slug":"Swift","permalink":"https://ios.league2eb.me/tags/Swift/"}]},{"title":"增加手勢讓鍵盤隱藏","slug":"增加手勢讓鍵盤隱藏","date":"2019-09-16T15:51:09.000Z","updated":"2020-06-05T21:01:52.000Z","comments":true,"path":"posts/4306aabc/","link":"","permalink":"https://ios.league2eb.me/posts/4306aabc/","excerpt":"","text":"首先在您的viewDidLoad呼叫此方法，如下 1234override func viewDidLoad() &#123; super.viewDidLoad() self.hideKeyboardWhenTappedAround()&#125; 12345678910111213extension UIViewController &#123; func hideKeyboardWhenTappedAround() &#123; let tap: UITapGestureRecognizer = UITapGestureRecognizer(target: self, action: #selector(UIViewController.dismissKeyboard)) //默認是true，若不關閉會無法觸發didSelect，看自身需求 tap.cancelsTouchesInView = false view.addGestureRecognizer(tap) &#125; func dismissKeyboard() &#123; view.endEditing(true) &#125;&#125;","categories":[{"name":"iOS","slug":"iOS","permalink":"https://ios.league2eb.me/categories/iOS/"}],"tags":[{"name":"UIViewController","slug":"UIViewController","permalink":"https://ios.league2eb.me/tags/UIViewController/"},{"name":"Swift","slug":"Swift","permalink":"https://ios.league2eb.me/tags/Swift/"}]},{"title":"Swift跳轉設定","slug":"Swift跳轉設定","date":"2019-09-16T15:49:55.000Z","updated":"2020-06-05T21:01:52.000Z","comments":true,"path":"posts/ceae8943/","link":"","permalink":"https://ios.league2eb.me/posts/ceae8943/","excerpt":"","text":"1234567if let url = URL(string:\"App-Prefs:root=WIFI\") &#123; if #available(iOS 10.0, *) &#123; UIApplication.shared.open(url, options: [:], completionHandler: nil) &#125; else &#123; UIApplication.shared.openURL(url) &#125;&#125; 以下為可跳轉之頁面代碼，但iOS10過後如果使用將會被退件無線網路 App-Prefs:root=WIFI藍牙 App-Prefs:root=Bluetooth營運商網路 App-Prefs:root=MOBILE_DATA_SETTINGS_ID個人熱點 App-Prefs:root=INTERNET_TETHERING營運商 App-Prefs:root=Carrier通知 App-Prefs:root=NOTIFICATIONS_ID通用 App-Prefs:root=General通用-關於本機 App-Prefs:root=General&amp;path=About通用-鍵盤 App-Prefs:root=General&amp;path=Keyboard通用-輔助功能 App-Prefs:root=General&amp;path=ACCESSIBILITY通用-語言與地區 App-Prefs:root=General&amp;path=INTERNATIONAL通用-還原 App-Prefs:root=Reset背景圖片 App-Prefs:root=WallpaperSiri App-Prefs:root=SIRI隱私 App-Prefs:root=PrivacySafari App-Prefs:root=SAFARI音樂 App-Prefs:root=MUSIC音樂-平衡器 App-Prefs:root=MUSIC&amp;path=com.apple.Music:EQ照片與相機 App-Prefs:root=PhotosFaceTime App-Prefs:root=FACETIME","categories":[{"name":"iOS","slug":"iOS","permalink":"https://ios.league2eb.me/categories/iOS/"}],"tags":[{"name":"Swift","slug":"Swift","permalink":"https://ios.league2eb.me/tags/Swift/"},{"name":"UIApplication","slug":"UIApplication","permalink":"https://ios.league2eb.me/tags/UIApplication/"}]},{"title":"Swift鍵盤上升","slug":"Swift鍵盤上升","date":"2019-09-16T15:47:26.000Z","updated":"2020-06-05T21:01:52.000Z","comments":true,"path":"posts/2b728169/","link":"","permalink":"https://ios.league2eb.me/posts/2b728169/","excerpt":"","text":"12345678910111213141516171819202122232425262728293031override func viewDidLoad() &#123; super.viewDidLoad()//註冊NotificationCenter.default.addObserver(self, selector: #selector(self.keyboardWillShow(notification:)), name: NSNotification.Name.UIKeyboardWillShow, object: nil)NotificationCenter.default.addObserver(self, selector: #selector(self.keyboardWillHide(notification:)), name: NSNotification.Name.UIKeyboardWillHide, object: nil)&#125; func keyboardWillShow(notification:NSNotification) &#123; if let keyboardSize = (notification.userInfo?[UIKeyboardFrameBeginUserInfoKey] as? NSValue)?.cgRectValue &#123; if self.view.frame.origin.y == 0 &#123; self.view.frame.origin.y -= keyboardSize.height &#125; &#125; &#125; func keyboardWillHide(notification:NSNotification) &#123; if let keyboardSize = (notification.userInfo?[UIKeyboardFrameBeginUserInfoKey] as? NSValue)?.cgRectValue &#123; if self.view.frame.origin.y != 0 &#123; self.view.frame.origin.y += keyboardSize.height &#125; &#125; &#125;override func viewWillDisappear(_ animated: Bool) &#123; //刪除觀察者，避免傳輸不必要的訊息 NotificationCenter.default.removeObserver(self, name: NSNotification.Name.UIKeyboardWillShow, object: self.view.window) NotificationCenter.default.removeObserver(self, name: NSNotification.Name.UIKeyboardWillHide, object: self.view.window) &#125;","categories":[{"name":"iOS","slug":"iOS","permalink":"https://ios.league2eb.me/categories/iOS/"}],"tags":[{"name":"Swift","slug":"Swift","permalink":"https://ios.league2eb.me/tags/Swift/"},{"name":"NotificationCenter","slug":"NotificationCenter","permalink":"https://ios.league2eb.me/tags/NotificationCenter/"}]},{"title":"Swift流程控制","slug":"Swift流程控制","date":"2019-09-16T15:45:50.000Z","updated":"2020-06-05T21:01:52.000Z","comments":true,"path":"posts/85b8e459/","link":"","permalink":"https://ios.league2eb.me/posts/85b8e459/","excerpt":"","text":"12345678910func test () &#123; print(\"準備執行迴圈\") for i in 0...10 &#123; print(\"迴圈執行第\\(i)次\") continue // 無論如何都把for迴圈跑完 break // 執行一次就直接執行迴圈外 return //執行一次就什麼事都不做 &#125; print(\"迴圈結束了\")&#125;","categories":[{"name":"iOS","slug":"iOS","permalink":"https://ios.league2eb.me/categories/iOS/"}],"tags":[{"name":"Swift","slug":"Swift","permalink":"https://ios.league2eb.me/tags/Swift/"}]},{"title":"ble+心跳帶粗略不負責任亂寫的...流程","slug":"粗略不負責任亂寫的-流程","date":"2019-09-16T15:38:47.000Z","updated":"2020-06-05T21:01:52.000Z","comments":true,"path":"posts/e7c97f89/","link":"","permalink":"https://ios.league2eb.me/posts/e7c97f89/","excerpt":"","text":"1.匯入CoreBluetooth 1import CoreBluetooth 2.建立結構與宣告需要物件與參數 1234567891011121314struct DiscoveredItem &#123; /*設備*/ var peripheral: CBPeripheral! /*訊號強弱*/ var lastRSSI = /*最後一次發現時間*/ var lastSeenDate: Date! /*直接初始*/ init(newPeripheral:CBPeripheral, RSSI:Int) &#123; peripheral = newPeripheral lastRSSI = RSSI lastSeenDate = Date() &#125;&#125; 3.於class中加入代理，並且宣告cantralManager(這邊使用TableView來顯示資料) 123456789101112131415class ViewController:UIViewController,CBCentralManagerDelegate,UITableViewDelegate,UITableViewDataSource &#123; /*宣告cantralManager*/ var cantralManager:CBCentralManager? /*宣告一個字典，這邊的Value為上面的結構型態*/ var allItems = [String:DiscoveredItem]() /*宣告即將要搜尋的設備，這邊我們使用的是速度踏頻器、心跳帶作為範例*/ let CYCLING_SPEED_AND_CADENCE_SERVICE_UUID:CBUUID = CBUUID(string:\"1816\") let HR_SERVICE_UUID:CBUUID = CBUUID(string:\"180D\") /*宣告心跳帶服務中的特徵，基本有3三個。*/ //可以參考：https://goo.gl/Iyr31u let HR_CHARACTERISTIC_UUID:CBUUID = CBUUID(string:\"2A37\") /*宣告心跳帶的特徵並把初始數值指定為nil*/ var HR_Characteristic:CBCharacteristic? = nil&#125; 4.於ViewDidLoad把cantralManage加入到主執行緒 1234override func viewDidLoad() &#123; super.viewDidLoad() centralManager = CBCentralManager(delegate: self, queue: nil)&#125; 5.偵測Centrel的狀態變數centralState拿來儲存狀態 12345678func centralManagerDidUpdateState (_ central: CBCentralManager) &#123; guard central.state == .powerdOn else &#123; let centralState = central.state.rawValue return &#125; let centralState = central.state.rawValue print(\"目前狀態為\\(centralState)\")&#125; 6.設定Scan，並啟動 (看需求決定，可以在ViewDidLoad或者一個按鈕中)如果你還看不懂下面在幹嘛，你就複製然後寫成一個方法在ViewDidLoad呼叫 1234567/*宣告將被搜尋的Service的UUID並加入一個陣列中*/let services = [CYCLING_SPEED_AND_CADENCE_SERVICE_UUID,HR_SERVICE_UUID]/*這兩個已經宣告並指定在上面了...*//*AllowDuplicatesKey的意思是若有一樣的設備就區分開回傳，true是為了避免重複*/let options = [CBCentralManagerScanOptionAllowDuplicatesKey:true]/*若withServices的參數給予nil則表示所有設備都掃描，但會比較耗電、慢。建議要有指定*/centralManager?.scanForPeripherals(withServices: services, options: options)/*當開始搜尋設備的時候，不會有任何動作。但如果有設備被搜尋到了就會觸發didDiscoverperipheral這個代理(第9步)*/ 7.當有設備被搜尋到的時候會觸發的方法，並有peripheral(設備)、advertisementData(設備參數)、訊號強弱等三個參數 1234567891011121314151617func centralManager(_ central: CBCentralManager, didDiscover peripheral: CBPeripheral, advertisementData: [String : Any], rssi RSSI: NSNumber) &#123; /*把搜尋到的設備內容丟進existItem常數中*/ let existItem = allItems[peripheral.identifier.uuidString] /*繼續搜尋並且把新的設備加入到newItem常數中，這邊的newPeripheral、RSSI為DiscoveredItem初始化會呼叫的物件*/ let newItem = DiscoveredItem(newPeripheral: peripheral, RSSI: Int(RSSI)) /*當繼續搜尋後有新設備，就把上面這個newItem加到allItems這個全域變數中*/ allItems[peripheral.identifier.uuidString] = newItem /*宣告一個日期等等會使用*/ let now = Date() /*宣告一個變數用來儲存上一次刷新時間用*/ var lastReloadDate: Date? /*判斷，假設沒有新的設備、上次刷新時間不存在、距離上次刷新已經超過2秒，就把上次刷新時間等於現在時間並且做一次刷新列表*/ if existItem == nil || lastReloadDate == nil || now.timeIntervalSince(lastReloadDate!) &gt; 2.0 &#123; lastReloadDate = now tableView.reloadData() &#125;&#125; 8.創建與設備連結的方法 1234567891011/*這個方法有帶了一個參數型態為IndexPath*/func startConnect(indexPatch:IndexPath) &#123;/*把搜尋到的設備ID存到型態為allKeys的陣列中*/let allKeys = Array(allItems.keys)/*把選擇到的設備編號丟到常數targerKey中*/let targerKey = allKeys[indexPatch.row]/*再把這個targerKey中的參數丟到targetItem常數中*/let targetItem = allItems[targerKey]/*最後就是與設備連結*/centralManager?.connect(targetItem!.peripheral, options: nil)&#125; 9.觸發與設備連結，這邊我們使用的是TableView的accessoryButtonTap，當然你也可以寫在didSelectRowAtIndexPath中。 1234func tableView(_ tableView: UITableView, accessoryButtonTappedForRowWith indexPath: IndexPath) &#123; /*呼叫*/ startConnect(indexPatch: indexPath)&#125; 10.第9步按下accessoryButton後便會觸發didConnect peripheral這個代理 12345678910func centralManager(_ central: CBCentralManager, didConnect peripheral: CBPeripheral) &#123; /*把這個設備的名字給存起來，加以辨識*/ let name = peripheral.name ?? \"UnKnow\" /*完成連結後還有事情要做，所以把自己添加給設備的代理*/ peripheral.delegate = self /*一定要執行\"discoverService\"功能去尋找可用的Service*/ peripheral.discoverServices(nil) /*此時是停止搜尋的最佳時機*/ centralManager?.stopScan()&#125; 10.執行peripheral.discoverServices(nil)後，便會觸發didDiscoverServices的代理 12345678910111213141516171819func peripheral(_ peripheral: CBPeripheral, didDiscoverServices error: Error?) &#123; /*在連線之後嘗試把這個設備有的Services給印出來*/ print(\"搜尋服務已經完成，共有\\(peripheral.services)\") /*如果有錯誤就執行return上的程式碼*/ guard error == nil else &#123; /*停止連線*/ centralManager?.cancelPeripheralConnection(peripheral) /*繼續搜尋設備*/ return &#125; /*若沒有錯誤就執行以下*/ /*使用for in 迴圈把設備的Services取出，這邊的service型態為CBService*/ for service in peripheral.services ?? [] &#123; /*判斷uuid是否相同，這邊就以心跳帶來執行*/ if service.uuid == HR_SERVICE_UUID &#123; /*啟動discoverCharacteristics來觸發代理*/ peripheral.discoverCharacteristics(nil, for: service) &#125; &#125;&#125; 11.執行peripheral.discoverCharacteristics(nil, for: service)後，便會觸發didDiscoverCharacteristicsFor service這個代理 123456789101112guard error == nil else &#123; return&#125;for characteristic in service.characteristic ?? [] &#123; /*uuid相同...*/ if (characteristic.uuid == HR_CHARACTERISTIC_UUID) &#123; /*註冊通知，一旦有新的數據就把數據給傳入。*/ peripheral.setNotifyValue(true, for: characteristic) /*把For迴圈宣告的變數「characteristic」丟進上面宣告型態為CBCharacteristic的HR_Characteristic*/ HR_Characteristic = characteristic &#125;&#125; 12.command+n建立一個新的Swift File 命名為「BinaryConvert」並加入以下程式碼 /這是一個Uint8的擴充/ 1234567891011121314151617extension UInt8&#123; /*這是一個回傳布林陣列的方法，主要功能是把Uint8的值轉成Bit Array*/ func toBitArray() -&gt; [Bool] &#123; var Result:[Bool] = [] Result.append(((self) &amp; 0x01) == 1); Result.append(((self &gt;&gt; 1) &amp; 0x01) == 1) Result.append(((self &gt;&gt; 2) &amp; 0x01) == 1) Result.append(((self &gt;&gt; 3) &amp; 0x01) == 1) Result.append(((self &gt;&gt; 4) &amp; 0x01) == 1) Result.append(((self &gt;&gt; 5) &amp; 0x01) == 1) Result.append(((self &gt;&gt; 6) &amp; 0x01) == 1) Result.append(((self &gt;&gt; 7) &amp; 0x01) == 1) return Result; &#125;&#125; 13.第11步中，註冊了一數據通知，只要有更新就把數值傳入並且呼叫didUpdateValueFor characteristic這個Delegate 123456789101112131415161718func peripheral(_ peripheral: CBPeripheral, didUpdateValueFor characteristic: CBCharacteristic, error: Error?) &#123; /*把characteristic中的value拿來作為Optional Binding解包*/ if let value = characteristic.value &#123; /*此時，HR_Characteristic為16位元的字符。並判斷兩者是否相等...*/ if (characteristic == HR_Characteristic) &#123; /*以下為解碼編程，這邊的toBitArray為第13步中的方法，他的陣列中總共有8個。規範中，拿取心跳就是第0個*/ let HRFlag = value[0].toBitArray()[0] /*這邊判斷就要看你的設備是支援UInt16還是Uint8*/ if HRFlag == true &#123; let hr = binaryToType([value[1],value[2]], UInt16.self) print(\"UInt16...\\(hr)\") &#125; else &#123; let hr = binaryToType([value[1]], UInt8.self) print(\"UInt8...\\(hr)\") &#125; &#125; &#125;&#125; ※若以上的步驟都完整的執行完畢，應該個可以拿到心跳帶回報的心跳數據","categories":[{"name":"iOS","slug":"iOS","permalink":"https://ios.league2eb.me/categories/iOS/"}],"tags":[{"name":"Swift","slug":"Swift","permalink":"https://ios.league2eb.me/tags/Swift/"},{"name":"CoreBluetooth","slug":"CoreBluetooth","permalink":"https://ios.league2eb.me/tags/CoreBluetooth/"}]},{"title":".p12轉.pem指令","slug":"p12轉pem指令","date":"2019-09-16T15:36:24.000Z","updated":"2020-06-04T10:22:39.000Z","comments":true,"path":"posts/3b243de0/","link":"","permalink":"https://ios.league2eb.me/posts/3b243de0/","excerpt":"","text":"首先用終端機CD到p12的目錄底下再來打上以下程式碼 1openssl pkcs12 -in 檔案名稱.p12 -out 匯出名稱.pem -nodes 完成!","categories":[{"name":"Shell","slug":"Shell","permalink":"https://ios.league2eb.me/categories/Shell/"}],"tags":[]},{"title":"過濾陣列中重複的值Objective-c","slug":"過濾陣列中重複的值Objective-c","date":"2019-09-16T15:20:24.000Z","updated":"2020-06-05T21:01:52.000Z","comments":true,"path":"posts/4049e1e3/","link":"","permalink":"https://ios.league2eb.me/posts/4049e1e3/","excerpt":"","text":"撰寫一個過濾選擇器的時候 發現陣列當中有重複的數值 例如如果判斷條件是以年月份 直上程式碼，因為我不知道NSOrderedSet其作…未來補充 12345NSArray 你的陣列變數名稱 = @[@AA,@BB,@AA];NSOrderedSet orderedSet = [NSOrderedSet orderedSetWithArray:你的陣列變數名稱];arrayWithoutDuplicates = [orderedSet mutableCopy];","categories":[{"name":"iOS","slug":"iOS","permalink":"https://ios.league2eb.me/categories/iOS/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"https://ios.league2eb.me/tags/Objective-C/"},{"name":"NSArray","slug":"NSArray","permalink":"https://ios.league2eb.me/tags/NSArray/"}]}]}